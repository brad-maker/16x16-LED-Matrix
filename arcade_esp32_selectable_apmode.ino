// A selectable array of animations with stop code and Wifi controllable
// from a self-hosted webpage on the ESP32

#include <WiFi.h> //Includes the default Arduino WiFi Library
#include <WebServer.h> //Includes the default Arduino WebServer
#include <FS.h> //Includes the default Arduino File Server function
#include <SPIFFS.h> //Includes Arduino File Storage function
#include <FastLED.h> //Includes the FastLED Module for RGB light controls

// Set your custom WiFi Access Point (AP) credentials
const char* ap_ssid = "16x16 LED Panel"; //ESP32 SSID when is Access Point Mode
const char* ap_password = "12345678";  // Optional password, must be at least 8 characters

// Set your custom device name (hostname)
const char* deviceName = "arcadeledpanel"; //Devices Host Name

// LED panel configuration
#define LED_PIN     16          // The data pin being used on the ESP32
#define NUM_LEDS    256         // 16x16=256 LED panel. This is the number of LEDs being controlled
#define WIDTH       16          // Width of the LED matrix
#define HEIGHT      16          // Height of the LED matrix

// Create LED array for FastLED
CRGB leds[NUM_LEDS];

// Create an instance of the WebServer on port 80
WebServer server(80);

// Handler for the root path to serve the HTML page
void handleRoot() {
  if (SPIFFS.exists("/index.html")) {
    File file = SPIFFS.open("/index.html", "r");
    server.streamFile(file, "text/html");
    file.close();
  } else {
    server.send(404, "text/plain", "File not found");
  }
}

// Global variables
int currentAnimation = 0; // 0 indicates no animation
bool animationChanged = false; // Track if the animation has changed

String userText = "Hello World";  // Default text, declare this globally
int scrollSpeed = 100; // Default speed in milliseconds

// Function to stop the current animation and reset LEDs
void stopAnimation() {
  FastLED.clear();
  FastLED.show();
}

// Function prototypes
void stopCurrentAnimation();
void handleSetAnimation();  // Function prototype
void handleUpdateScrollText();

//Function to set the text scroll speed
void handleSetScrollSpeed() {
  if (server.hasArg("speed")) {
    scrollSpeed = server.arg("speed").toInt();
    Serial.println("New scroll speed: " + String(scrollSpeed));
    server.send(200, "text/plain", "Speed updated to " + String(scrollSpeed));
  } else {
    server.send(400, "text/plain", "Speed parameter missing");
  }
}

CRGB textColor = CRGB::Green;  // Default color, declare this globally

void handleSetFontColor() {
    if (server.hasArg("color")) {
        String colorStr = server.arg("color");
        // Remove the '#' character if present
        if (colorStr.startsWith("#")) {
            colorStr = colorStr.substring(1);
        }
        // Convert hex string to long
        long colorValue = strtol(colorStr.c_str(), NULL, 16);
        textColor = CRGB(colorValue);
        Serial.println("New font color: #" + colorStr);
        server.send(200, "text/plain", "Font color updated to #" + colorStr);
    } else {
        server.send(400, "text/plain", "Color parameter missing");
    }
}

// Helper function XY coordinates to LED index
uint16_t XY(uint8_t x, uint8_t y) {
  uint16_t i;

  if (y & 0x01) {
    // Odd rows run forwards
    i = (y * WIDTH) + x;
  } else {
    // Even rows run backwards
    i = (y * WIDTH) + (WIDTH - 1 - x);
  }

  return i;
}

// Check if the animation has changed
void loop() {
  server.handleClient(); // Handle web server requests

  if (animationChanged) {
    stopAnimation(); // Stop the current animation
    animationChanged = false; // Reset the flag
  }

// Check the current animation and run it in a loop
  switch (currentAnimation) {
    case 1:
      fireEffect();
      break;
    case 2:
      twinkle();
      break;
    case 3:
      rainbow();
      break;
    case 4:
      solidred();
      break;
    case 5:
      solidgreen();
      break;
    case 6:
      solidblue();
      break;
    case 7:
      arcadesprites();
      break;
    case 8:
      colorwipe();
      break;
    case 9:
      plasma();
      break;
    case 10:
      bouncingball();
      break;
    case 11:
      meteoreffect();
      break;
    case 12:
      waveEffect();
      break;
    case 13:
      conwaysGameOfLife();
      break;
    case 14:
      fireworksEffect();
      break;
    case 15:
      raineffect();
      break;
    case 16:
      matrixCodeRain();
      break;
    case 17:
      rotatingLines();
      break;
    case 18:
      circularSpin();
      break;
    case 19:
      rippleEffect();
    case 20:
      starfieldEffect();
      break;
    case 21:
      kaleidoscopeEffect();
      break;
    case 22:
      fractals();
      break;
    case 23:
      colourWaves();
      break;
    case 24:
      lissajousCurves();
      break;
    case 25:
      perlinNoisePattern();
      break;
    case 26:
      lavaLampEffect();
      break;
    case 27:
      mazeGeneratorEffect();
      break;
  case 28:
    scrollText();
    break;
    // Add more cases for other animations
    default:
      break; // No animation selected
  }
}

// Function to handle setting the animation based on the received argument
void handleSetAnimation() {
  if (server.hasArg("animation")) {
    String animationName = server.arg("animation");
    Serial.println("Animation requested: " + animationName);

    // Determine the animation index based on the name
    if (animationName == "fireEffect") {
      currentAnimation = 1;  // Use integer values
    } else if (animationName == "twinkle") {
      currentAnimation = 2;
    } else if (animationName == "rainbow") {
      currentAnimation = 3;
    } else if (animationName == "solidred") {
      currentAnimation = 4;
    } else if (animationName == "solidgreen") {
      currentAnimation = 5;
    } else if (animationName == "solidblue") {
      currentAnimation = 6;
    } else if (animationName == "arcadesprites") {
      currentAnimation = 7;
    } else if (animationName == "colorwipe") {
      currentAnimation = 8;
    } else if (animationName == "plasma") {
      currentAnimation = 9;
    } else if (animationName == "bouncingball") {
      currentAnimation = 10;
    } else if (animationName == "meteoreffect") {
      currentAnimation = 11;
    } else if (animationName == "waveEffect") {
      currentAnimation = 12;
    } else if (animationName == "conwaysGameOfLife") {
      currentAnimation = 13;
    } else if (animationName == "fireworksEffect") {
      currentAnimation = 14;
    } else if (animationName == "raineffect") {
      currentAnimation = 15;
    } else if (animationName == "matrixCodeRain") {
      currentAnimation = 16;
    } else if (animationName == "rotatingLines") {
      currentAnimation = 17;
    } else if (animationName == "circularSpin") {
      currentAnimation = 18;
    } else if (animationName == "rippleEffect") {
      currentAnimation = 19;
    } else if (animationName == "starfieldEffect") {
      currentAnimation = 20;
    } else if (animationName == "kaleidoscopeEffect") {
      currentAnimation = 21;
    } else if (animationName == "fractals") {
      currentAnimation = 22;
    } else if (animationName == "colourWaves") {
      currentAnimation = 23;
    } else if (animationName == "lissajousCurves") {
      currentAnimation = 24;
    } else if (animationName == "perlinNoisePattern") {
      currentAnimation = 25;
    } else if (animationName == "lavaLampEffect") {
      currentAnimation = 26;
    } else if (animationName == "mazeGeneratorEffect") {
      currentAnimation = 27;
    } else if (animationName == "scrollText") {
      currentAnimation = 28;
    } else {
      currentAnimation = 0;  // No animation selected
    }
    animationChanged = true;
    server.send(200, "text/plain", "Animation set to: " + animationName);
  } else {
    server.send(400, "text/plain", "Bad Request: Missing 'animation' parameter");
  }
}

// Initialize Serial for debugging
void setup() {
  Serial.begin(115200);
  FastLED.setBrightness(255);
  delay(1000);  // Allow time for Serial Monitor to initialize

  // Initialize SPIFFS - Serial Peripheral Interface Flash File System
  if (!SPIFFS.begin(true)) {  // The 'true' parameter formats the filesystem if necessary
    Serial.println("Failed to mount SPIFFS");
    return;
  }
  Serial.println("SPIFFS mounted successfully");

  // Initialize LED panel
  FastLED.addLeds<WS2812, LED_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(15); //Default brightness
  FastLED.clear();
  FastLED.show();

  // Set up Wi-Fi in AP mode
  WiFi.softAP(ap_ssid, ap_password);
  Serial.println("ESP32 started in AP mode");

  // Display the IP address of the AP
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

// Define server routes
  server.on("/", handleRoot);
  server.on("/setAnimation", handleSetAnimation);  // Start animation
  server.on("/setBrightness", handleSetBrightness); // Set brightness
  server.on("/updateScrollText", handleUpdateScrollText);
  server.on("/setScrollSpeed", handleSetScrollSpeed);
  server.on("/setFontColor", handleSetFontColor);
  server.on("/poweroff", handlePowerOff); // Power Off

// Start the server
  server.begin();
  Serial.println("Server started");
}

// Handler for powering off the ESP32
void handlePowerOff() {
  Serial.println("Powering off...");
  esp_deep_sleep(10 * 1000000); // Sleep for 10 seconds
}

// Helper function to add non-blocking delay. This helps the stop animation command.
void nonBlockingDelay(int milliseconds) {
  unsigned long start = millis();
  while (millis() - start < milliseconds) {
    // Handle incoming client requests during delay
    server.handleClient();
    delay(1);  // 1ms delay, checking frequently
  }
}

// Global LED brightness variable (0-255)
int ledBrightness = 15;  // Default brightness level

// Function to handle LED brightness update
void handleSetBrightness() {
  if (server.hasArg("brightness")) {
    String brightnessStr = server.arg("brightness");
    int brightnessValue = brightnessStr.toInt();
    brightnessValue = constrain(brightnessValue, 0, 255);  // Ensure the brightness is within valid range
    ledBrightness = brightnessValue;  // Update the global brightness variable
    FastLED.setBrightness(ledBrightness);  // Set the brightness for LEDs
    FastLED.show();  // Update the LED panel
    Serial.println("Brightness set to: " + String(ledBrightness));
    server.send(200, "text/plain", "Brightness set to " + String(ledBrightness));  // Send response
  } else {
    server.send(400, "text/plain", "Brightness not specified");
  }
}

//Character Map for the Led Matrix
void drawSimpleChar(int x, int y, char c, CRGB color) {
  const uint8_t font[][5] = {
    {0b000, 0b000, 0b000, 0b000, 0b000}, // Space
    {0b111, 0b101, 0b101, 0b101, 0b111}, // 0
    {0b001, 0b001, 0b001, 0b001, 0b001}, // 1
    {0b111, 0b001, 0b111, 0b100, 0b111}, // 2
    {0b111, 0b001, 0b011, 0b001, 0b111}, // 3
    {0b101, 0b101, 0b111, 0b001, 0b001}, // 4
    {0b111, 0b100, 0b111, 0b001, 0b111}, // 5
    {0b111, 0b100, 0b111, 0b101, 0b111}, // 6
    {0b111, 0b001, 0b010, 0b100, 0b100}, // 7
    {0b111, 0b101, 0b111, 0b101, 0b111}, // 8
    {0b111, 0b101, 0b111, 0b001, 0b111}, // 9
    {0b111, 0b101, 0b111, 0b101, 0b101}, // A
    {0b110, 0b101, 0b110, 0b101, 0b110}, // B
    {0b111, 0b100, 0b100, 0b100, 0b111}, // C
    {0b110, 0b101, 0b101, 0b101, 0b110}, // D
    {0b111, 0b100, 0b111, 0b100, 0b111}, // E
    {0b111, 0b100, 0b111, 0b100, 0b100}, // F
    {0b111, 0b100, 0b101, 0b101, 0b111}, // G
    {0b101, 0b101, 0b111, 0b101, 0b101}, // H
    {0b111, 0b010, 0b010, 0b010, 0b111}, // I
    {0b001, 0b001, 0b001, 0b101, 0b111}, // J
    {0b101, 0b110, 0b100, 0b110, 0b101}, // K
    {0b100, 0b100, 0b100, 0b100, 0b111}, // L
    {0b101, 0b111, 0b101, 0b101, 0b101}, // M
    {0b110, 0b101, 0b101, 0b101, 0b101}, // N
    {0b111, 0b101, 0b101, 0b101, 0b111}, // O
    {0b111, 0b101, 0b111, 0b100, 0b100}, // P
    {0b111, 0b101, 0b101, 0b111, 0b001}, // Q
    {0b111, 0b101, 0b110, 0b101, 0b101}, // R
    {0b111, 0b100, 0b111, 0b001, 0b111}, // S
    {0b111, 0b010, 0b010, 0b010, 0b010}, // T
    {0b101, 0b101, 0b101, 0b101, 0b111}, // U
    {0b101, 0b101, 0b101, 0b101, 0b010}, // V
    {0b101, 0b101, 0b101, 0b111, 0b101}, // W
    {0b101, 0b101, 0b010, 0b101, 0b101}, // X
    {0b101, 0b101, 0b010, 0b010, 0b010}, // Y
    {0b111, 0b001, 0b010, 0b100, 0b111}, // Z
    {0b000, 0b011, 0b001, 0b111, 0b111}, // a
    {0b100, 0b110, 0b101, 0b101, 0b110}, // b
    {0b000, 0b011, 0b100, 0b100, 0b011}, // c
    {0b001, 0b011, 0b101, 0b101, 0b011}, // d
    {0b000, 0b110, 0b111, 0b100, 0b011}, // e
    {0b011, 0b010, 0b111, 0b010, 0b010}, // f
    {0b000, 0b111, 0b101, 0b011, 0b111}, // g
    {0b100, 0b110, 0b101, 0b101, 0b101}, // h
    {0b010, 0b000, 0b110, 0b010, 0b111}, // i
    {0b001, 0b000, 0b001, 0b101, 0b110}, // j
    {0b100, 0b101, 0b110, 0b101, 0b101}, // k
    {0b110, 0b010, 0b010, 0b010, 0b111}, // l
    {0b000, 0b111, 0b111, 0b101, 0b101}, // m
    {0b000, 0b110, 0b101, 0b101, 0b101}, // n
    {0b000, 0b111, 0b101, 0b101, 0b111}, // o
    {0b000, 0b110, 0b101, 0b110, 0b100}, // p
    {0b000, 0b011, 0b101, 0b011, 0b001}, // q
    {0b000, 0b101, 0b110, 0b100, 0b100}, // r
    {0b000, 0b011, 0b110, 0b001, 0b110}, // s
    {0b010, 0b111, 0b010, 0b010, 0b001}, // t
    {0b000, 0b101, 0b101, 0b101, 0b111}, // u
    {0b000, 0b101, 0b101, 0b101, 0b010}, // v
    {0b000, 0b101, 0b101, 0b111, 0b101}, // w
    {0b000, 0b101, 0b010, 0b010, 0b101}, // x
    {0b000, 0b101, 0b101, 0b011, 0b110}, // y
    {0b000, 0b111, 0b011, 0b100, 0b111}, // z
    {0b000, 0b000, 0b000, 0b000, 0b010}, // . (period)
    {0b000, 0b000, 0b000, 0b010, 0b100}, // , (comma)
    {0b010, 0b010, 0b010, 0b000, 0b010}, // ! (exclamation mark)
    {0b010, 0b101, 0b001, 0b010, 0b010}, // ? (question mark)
    {0b010, 0b000, 0b000, 0b000, 0b010}, // : (colon)
    {0b000, 0b010, 0b000, 0b010, 0b100}, // ; (semicolon)
    {0b010, 0b101, 0b111, 0b101, 0b101}, // @ (at symbol)
    {0b010, 0b010, 0b111, 0b010, 0b010}, // + (plus)
    {0b000, 0b000, 0b111, 0b000, 0b000}, // - (minus)
    {0b001, 0b010, 0b100, 0b010, 0b001}, // / (forward slash)
    {0b100, 0b010, 0b001, 0b010, 0b100}, // \ (backslash)
    {0b111, 0b000, 0b111, 0b000, 0b111}, // = (equals)
    {0b010, 0b010, 0b010, 0b010, 0b010}, // | (vertical bar)
    {0b101, 0b010, 0b000, 0b000, 0b000}, // ^ (caret)
    {0b000, 0b000, 0b000, 0b000, 0b111}, // _ (underscore)
    {0b110, 0b110, 0b000, 0b000, 0b000}, // " (double quote)
    {0b010, 0b010, 0b000, 0b000, 0b000}, // ' (single quote)
    {0b011, 0b011, 0b000, 0b000, 0b000}, // ` (backtick)
    {0b000, 0b010, 0b000, 0b010, 0b000}, // " (left/right double quote)
    {0b100, 0b010, 0b000, 0b000, 0b000}, // ' (left single quote)
    {0b001, 0b010, 0b000, 0b000, 0b000}, // ' (right single quote)
  };

  int idx = -1;
  if (c == ' ') idx = 0;
  else if (c >= '0' && c <= '9') idx = c - '0' + 1;
  else if (c >= 'A' && c <= 'Z') idx = c - 'A' + 11;
  else if (c >= 'a' && c <= 'z') idx = c - 'a' + 37;
  else {
    switch (c) {
      case '.': idx = 63; break;
      case ',': idx = 64; break;
      case '!': idx = 65; break;
      case '?': idx = 66; break;
      case ':': idx = 67; break;
      case ';': idx = 68; break;
      case '@': idx = 69; break;
      case '+': idx = 70; break;
      case '-': idx = 71; break;
      case '/': idx = 72; break;
      case '\\': idx = 73; break;
      case '=': idx = 74; break;
      case '|': idx = 75; break;
      case '^': idx = 76; break;
      case '_': idx = 77; break;
      case '"': idx = 78; break;
      case '\'': idx = 79; break;
      case '`': idx = 80; break;
    }
  }

  if (idx != -1) {
    for (int i = 0; i < 5; i++) {
      for (int j = 0; j < 3; j++) {
        if (font[idx][i] & (0b100 >> j)) {
          int drawX = x + j;
          int drawY = y + i;
          if (drawX >= 0 && drawX < WIDTH && drawY >= 0 && drawY < HEIGHT) {
            leds[XY(drawX, drawY)] = color;
          }
        }
      }
    }
  }
}

//Text update function for scolling text
void handleUpdateScrollText() {
  if (server.hasArg("text")) {
    userText = server.arg("text");
    currentAnimation = 28;  // Set the current animation to scrolling text
    server.send(200, "text/plain", "Text updated to: " + userText);
    Serial.println("Text updated to: " + userText);  // Debug print
  } else {
    server.send(400, "text/plain", "Text parameter is missing");
    Serial.println("Text parameter is missing");  // Debug print
  }
}

//Scrolling Text Function
void scrollText() {
    int charWidth = 4;  // 3 pixels wide + 1 pixel space
    int textWidth = userText.length() * charWidth;
    int offset = WIDTH;

    while (currentAnimation == 28) {  // Assuming 28 is the index for scrolling text
        FastLED.clear();
        for (int i = 0; i < userText.length(); i++) {
            int x = offset + (i * charWidth);
            if (x >= -3 && x < WIDTH) {
                drawSimpleChar(x, 5, userText[i], textColor);  // Use textColor here
            }
        }
        FastLED.show();
        
        offset--;
        if (offset < -textWidth) {
            offset = WIDTH;
        }

        // Non-blocking delay with animation change check
        unsigned long startTime = millis();
        while (millis() - startTime < scrollSpeed) {
            if (currentAnimation != 28) {
                return;  // Exit if animation has changed
            }
            server.handleClient();  // Handle any incoming web requests
            delay(1);  // Small delay to prevent tight looping
        }
    }
}

// Create the array of retro arcade characters and store it in Flash memory
const long DigDug01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000,
  0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000,
  0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xCCCCCC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long DigDug02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000,
  0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000,
  0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xCCCCCC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000,
  0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Qbert01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000,
  0x000000, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xffffcc, 0xffffcc, 0xff0033, 0xffffcc, 0xffffcc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0xff0033, 0xff0033,
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033,
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000,
  0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff0033,
  0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0x000000, 0xff0033, 0xff0033, 0x000033, 0x000033, 0xff6600, 0x000000,
  0x000000, 0xff0033, 0x000033, 0x000033, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0x000000,
};

const long Qbert02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000,
  0x000000, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xffffff, 0xffffff, 0xff0033, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0xff0033, 0x000000,
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033,
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000,
  0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff0033,
  0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000, 0xff6600, 0x000000,
  0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0x000000,
};

const long BombJack01[] PROGMEM =
{
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0xffffff, 0x0099ff, 0xffffff, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0xffffff, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffffff, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0xff0000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x333366, 0x333366,
  0x333366, 0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000, 0x333366, 0x333366,
  0x333366, 0x333366, 0x000000, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0xffff00, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x000000, 0x333366,
  0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x333366, 0x333366, 0x333366,
};

const long BombJack02[] PROGMEM =
{
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x000000, 0x000000, 0x333366, 0x0099ff, 0xffffff, 0xffffff, 0xffcc99, 0xffffff, 0xffffff, 0x0099ff, 0x333366, 0x000000, 0x000000, 0x333366,
  0x333366, 0x000000, 0x000000, 0xff0000, 0xffcc99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffcc99, 0xff0000, 0x000000, 0x000000, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xffffff, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffffff, 0xff0000, 0xff0000, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0x000000, 0xff0000, 0x000000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0xffff00, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0xffffff, 0xffffff, 0x333366,
  0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x333366,
  0x333366, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
  0x333366, 0x333366, 0x333366, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0x333366, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x333366, 0x333366, 0x333366,
};

const long TheGlob01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long TheGlob02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
};

const long TheGlob03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x00B0F0, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long TheGlob04[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0,
};

const long TheGlob05[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long TheGlob06[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
  0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long TheGlob07[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
  0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long pengodance01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x06FA1D, 0x06FA1D, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000, 0x06FA1D,
  0x06FA1D, 0x000000, 0x06FA1D, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x06FA1D, 0x000000,
  0x000000, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x06FA1D, 0x06FA1D, 0xFF0000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D,
  0x000000, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x000000,
};

const long pengodance02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x000000,
  0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000,
  0x000000, 0x000000, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long pengodance03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000, 0x000000,
  0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00,
  0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00,
  0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00,
  0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
};

const long pengodance04[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000,
  0x00FF00, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x00FF00,
  0x00FF00, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
  0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00,
  0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long pengodance05[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000,
  0x00FF00, 0x00FF00, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x00FF00,
  0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00,
  0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x00FF00,
  0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000,
  0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
};

const long pengodance06[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000,
  0x00FF00, 0x00FF00, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x00FF00, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
  0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00,
  0x00FF00, 0x00FF00, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long pengodance07[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x00FF00, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000,
  0x000000, 0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000,
  0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000,
  0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
};

const long pengodance08[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000,
  0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000,
  0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
};

const long pengodance09[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x00FF00, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x00FF00,
  0x00FF00, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x00FF00,
  0x00FF00, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x00FF00,
  0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00,
  0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x00FF00, 0x000000,
  0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000,
  0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00,
};

const long pengodance10[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00,
  0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00,
  0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
  0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
  0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
  0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
};

const long mspacman01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0x000000, 0x0000FF, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long mspacman02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0x000000, 0x0000FF, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long mspacman03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0x000000, 0x0000FF, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long invaders03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders04[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders05[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders06[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long attackufo01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000,
  0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
};

const long attackufo02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
  0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000,
  0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long attackufo03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA,
  0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long attackufo04[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000,
  0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000,
  0x000000, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000,
  0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x000000, 0x000000,
  0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
  0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x000000,
  0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long attackufo05[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
};

const long birdytry10[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry11[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry12[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry13[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF,
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry14[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000,
  0x000000, 0x2E2EF6, 0x000000, 0x000000, 0xFFFFFF, 0xF8A6F2, 0x000000, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0xFFFFFF, 0x000000,
  0xFFFFFF, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000,
  0xFFFFFF, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry15[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0xFFFFFF,
  0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0x000000, 0xF8A6F2, 0x000000, 0x000000, 0x000000, 0x000000,
  0xFFFFFF, 0x000000, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000,
  0xFFFFFF, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0xFFFFFF, 0xFFFFFF,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
  0x000000, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
  0x000000, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000,
  0xFFFFFF, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0x000000, 0x000000,
  0xFFFFFF, 0x000000, 0xFFFFFF, 0xF8A6F2, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x2E2EF6, 0x000000, 0xFFFFFF, 0xFFFFFF,
  0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xF8A6F2, 0x000000, 0xFFFFFF, 0x000000,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
};

const long birdytry16[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xF8A6F2, 0xF8A6F2, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0x000000, 0xF8A6F2, 0x000000,
  0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0x000000,
  0xFFFFFF, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0xFFFFFF, 0x000000,
  0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0xFFFFFF, 0xFFFFFF,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xFFFFFF, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x000000, 0x000000, 0x000000,
};

const long dkmario02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xED7D31, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xED7D31, 0xED7D31, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000,

};

const long dkmario03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
  0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000,
  0x000000, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xFF0000, 0xFF0000, 0xFF0000, 0xED7D31, 0xFF0000, 0x0000FF, 0x0000FF, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31,
  0xED7D31, 0xED7D31, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x0000FF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000,
  0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000,

};

const long bombjack03[] PROGMEM =
{
  0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00FFFF, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0xFFFFFF, 0x00FFFF, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x000000, 0x00FFFF, 0x000000, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0x000000, 0xFFE393, 0x000000, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x00355C, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0x00FFFF, 0x00FFFF, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C, 0x00FFFF, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C,
  0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFF0000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C,
  0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFF00, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00355C,
  0x00355C, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x000000, 0x000000, 0x00355C, 0x00355C,


};

const long bombjack04[] PROGMEM =
{
  0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00FFFF, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0x00FFFF, 0xFFFFFF, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0x000000, 0x00FFFF, 0x000000, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x000000, 0xFFE393, 0x000000, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00FFFF, 0x00FFFF, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0x00FFFF, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C,
  0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFF0000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0xFFFF00, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00355C, 0x00355C,
  0x00355C, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00355C,
  0x00355C, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C, 0x00355C,
  0x00355C, 0x00355C, 0x000000, 0x000000, 0x000000, 0x000000, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C,

};

const long frogger01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0xFF00FF, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFF00FF, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long frogger02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0xFF00FF, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFF00FF, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long frogger03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0xFF00FF, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFF00FF, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long bagman01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000,

};

const long bagman02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xED7D31, 0xED7D31,
  0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0x000000, 0x000000,
  0x000000, 0x000000, 0xED7D31, 0xED7D31, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31, 0x000000, 0x000000,
  0x000000, 0x000000, 0xED7D31, 0xED7D31, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000,
  0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000,

};

const long bagman03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x00B0F0,
  0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xED7D31, 0x000000, 0x000000,
  0x000000, 0x000000, 0xED7D31, 0xED7D31, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xED7D31, 0xED7D31,
  0xED7D31, 0xED7D31, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31, 0x000000, 0x000000,
  0x000000, 0x000000, 0xED7D31, 0xED7D31, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xED7D31, 0xED7D31,
  0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long bagman04[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31,
  0xED7D31, 0xED7D31, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31,
  0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long bagman05[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000,
  0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000,

};

const long mrdoball01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x3333FF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000,
  0x3333FF, 0x000000, 0x000000, 0x000000, 0x3333FF, 0x3333FF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x3333FF, 0x3333FF, 0x3333FF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3333FF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x3333FF, 0x3333FF,
  0x3333FF, 0x3333FF, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3333FF,
  0x3333FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x3333FF, 0x3333FF, 0x3333FF, 0x3333FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long mrdoball02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
  0x3333FF, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x3333FF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x3333FF, 0x3333FF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x3333FF, 0x3333FF, 0x3333FF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3333FF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0x3333FF, 0x3333FF, 0x3333FF, 0x3333FF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long bbobble01[] PROGMEM =
{
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0x06FA1D, 0x3C66EC,
  0x3C66EC, 0xFFFF00, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFF00, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x06FA1D,
  0x06FA1D, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0x3C66EC,
  0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0x3C66EC,

};

const long bbobble02[] PROGMEM =
{
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0x06FA1D, 0x3C66EC,
  0x3C66EC, 0xFFFF00, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFF00, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFFFF00, 0x06FA1D,
  0x3C66EC, 0x06FA1D, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0x3C66EC,
  0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0x3C66EC,

};

const long bbobble03[] PROGMEM =
{
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0x06FA1D, 0x3C66EC,
  0x3C66EC, 0xFFFF00, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFF00, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
  0x3C66EC, 0x3C66EC, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x3C66EC,
  0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0x3C66EC,
  0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D,

};

const long digdug201[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0x9BC2E6, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0xFF99FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF99FF, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000,
  0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000,
  0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0xFFC000, 0x000000, 0x000000,
  0x000000, 0xFFC000, 0x000000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000,
  0x000000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0xFFC000, 0x000000,
  0x000000, 0x000000, 0xFFC000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x000000,
  0x000000, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x000000, 0x000000, 0xFFC000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x000000,
  0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long digdug202[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0x9BC2E6, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0xFF99FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF99FF, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000,
  0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000,
  0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0xFFC000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFC000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000,
  0x000000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0x000000, 0xFFC000, 0x000000, 0x000000,
  0x000000, 0xFFC000, 0x000000, 0x000000, 0x9BC2E6, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x000000, 0x000000,
  0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x9BC2E6, 0x000000, 0xFFC000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x9BC2E6, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000,
  0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x9BC2E6, 0x9BC2E6, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long digdug203[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0x9BC2E6, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0xFF99FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF99FF, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000,
  0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000,
  0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0xFFC000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFC000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000,
  0x000000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0xFFC000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFC000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x9BC2E6, 0x000000, 0x000000,
  0x000000, 0x9BC2E6, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0xFFC000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x9BC2E6, 0x000000,
  0x000000, 0x9BC2E6, 0x9BC2E6, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x9BC2E6, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long GalagaBfly01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x000000, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x000000, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFFFF00, 0xFFFF00, 0x00CC99, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000,
  0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000,
  0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000,
  0x000000, 0x00CC99, 0xFF3300, 0x00CC99, 0x00CC99, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0x00CC99, 0x000000, 0x000000,
  0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0x00CC99, 0x00CC99,
  0x00CC99, 0xFF3300, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0x00CC99, 0x000000,
  0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99,
  0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000,
  0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99,
  0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000,
};

const long GalagaBfly02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x000000, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0x00CC99, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000,
  0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000,
  0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000,
  0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000,
  0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x000000, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long BTime01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFC000, 0xFFC000, 0xC65911, 0xFFC000, 0xFFC000, 0xC65911, 0xFFC000, 0xFFC000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
  0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF,
  0xFFC000, 0xFFC000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFC000, 0xFFC000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x48F52B, 0x48F52B, 0x48F52B, 0x000000, 0x000000, 0x48F52B, 0x48F52B, 0x48F52B, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long BTime02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
  0xFFC000, 0xFFC000, 0x000000, 0x000000, 0xFFFFFF, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFFFFF, 0x000000, 0x000000, 0xFFC000, 0xFFC000,
  0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFC000, 0xFFC000, 0xC65911, 0xFFC000, 0xFFC000, 0xC65911, 0xFFC000, 0xFFC000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF,
  0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
  0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
  0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x48F52B, 0x48F52B, 0x48F52B, 0x000000, 0x000000, 0x48F52B, 0x48F52B, 0x48F52B, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Mappy01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000,
  0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x3C66EC, 0x3C66EC, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
  0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0x3C66EC, 0x000099, 0xFFFF66, 0xFFFF66, 0x000099, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000,
  0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
  0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000,
  0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF66,
  0x000000, 0xFFFF66, 0x000000, 0x000000, 0xFAA306, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x3C66EC, 0xA6A6A6, 0xA6A6A6,
  0xA6A6A6, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC, 0xA6A6A6, 0xFFFF66, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xC65911, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0xC65911, 0xC65911, 0x000000, 0x000000,
  0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xC65911, 0xC65911, 0x000000,
  0x000000, 0xC65911, 0xC65911, 0xC65911, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3C66EC, 0xC65911, 0xC65911, 0xC65911, 0x000000,
  0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Mappy02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000,
  0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x3C66EC, 0x3C66EC, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
  0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0x3C66EC, 0x000099, 0xFFFF66, 0xFFFF66, 0x000099, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000,
  0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
  0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
  0x000000, 0xFFFF66, 0x000000, 0x000000, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000,
  0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0xFFFF66, 0x000000,
  0x000000, 0xFFFF66, 0xA6A6A6, 0x000000, 0xFAA306, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xA6A6A6, 0xA6A6A6, 0x000000,
  0x000000, 0xA6A6A6, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000,
  0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Mappy03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000,
  0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x3C66EC, 0x3C66EC, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
  0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0x3C66EC, 0x000099, 0xFFFF66, 0xFFFF66, 0x000099, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000,
  0xFFFF66, 0x000000, 0xA6A6A6, 0xFF9999, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
  0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xFF9999, 0xA6A6A6, 0x000000, 0xFFFF66, 0x000000,
  0x000000, 0x000000, 0xFFFF66, 0x000000, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000,
  0xA6A6A6, 0x000000, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000,
  0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0xFAA306, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x3C66EC, 0xA6A6A6, 0xA6A6A6,
  0x000000, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xC65911, 0xC65911, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0xC65911, 0xC65911, 0x000000, 0x000000,
  0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xC65911, 0xC65911, 0xC65911,
  0xC65911, 0xC65911, 0xC65911, 0xC65911, 0x3C66EC, 0x000000, 0x000000, 0x000000, 0x000000, 0x3C66EC, 0x3C66EC, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911,
  0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird01[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird02[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000,
  0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
  0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird03[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000,
  0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000,
  0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0xFF3300, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird04[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
  0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
  0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0xD9D9D9, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird05[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
  0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF,
  0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0xD9D9D9, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x0000FF, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird06[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000,
  0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000,
  0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0xD9D9D9, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x0000FF, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird07[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
  0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
  0x000000, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF3300, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird08[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF,
  0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
  0x000000, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird09[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
  0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
  0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird10[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
  0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000,
  0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird11[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

// Rainbow effect

void rainbow() {
  uint16_t i, j = 0;

  // Loop the rainbow effect as long as currentAnimation is set to rainbow
  while (currentAnimation == 3) {  // Assuming '3' is the code for the rainbow animation
    for (i = 0; i < NUM_LEDS; i++) {
      leds[i] = CHSV((i + j) % 255, 255, 255);  // Cycle through the color wheel
    }
    FastLED.show();

    // Non-blocking delay function to allow animation interruption
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 20) {  // 20ms delay to adjust speed
      if (currentAnimation != 3) {
        return;  // Exit the rainbow animation if a different animation is selected
      }
      server.handleClient();  // Handle web server requests during the delay
      delay(1);  // Yield to allow processing other tasks
    }

    j++;  // Increment the color wheel index
  }
}

// Fire Effect parameters

#define COOLING  55  // Adjust this value to control how quickly the fire cools (higher value = faster cooling)
#define SPARKING 120 // Adjust this value to control how many new sparks are created per frame

// Custom function to map heat to color
CRGB heatColor(byte temperature) {
  // Scale 'temperature' down from 0-255 to 0-191
  byte t192 = scale8(temperature, 191);

  // Calculate a value that will slowly rotate through the colors
  byte heatramp = t192 & 0x3F; // 0..63
  heatramp <<= 2; // scale up to 0..252

  // Determine which third of the spectrum we're in:
  if (t192 > 0x80) { // hottest
    return CRGB(255, 255, heatramp); // White to yellow
  } else if (t192 > 0x40) { // middle
    return CRGB(255, heatramp, 0); // Yellow to red
  } else { // coolest
    return CRGB(heatramp, 0, 0); // Red to black
  }
}

// Fire Effect function

void fireEffect() {
  static byte heat[16][16];  // 2D array to store heat values for each LED

  while (currentAnimation == 1) {  // Continue while this animation is selected
    // Step 1. Cool down every cell a little
    for (int x = 0; x < 16; x++) {
      for (int y = 0; y < 16; y++) {
        // Subtract a random amount from each cell's heat, bounded by COOLING value
        heat[x][y] = qsub8(heat[x][y], random8(0, ((COOLING * 10) / 16) + 2));
      }
    }

    // Step 2. Heat from each cell drifts 'up' and diffuses a little
    for (int y = 15; y >= 2; y--) {
      for (int x = 0; x < 16; x++) {
        // Average the heat from the three pixels below this one
        heat[x][y] = (heat[x][y - 1] + heat[x][y - 2] + heat[x][y - 2]) / 3;
      }
    }

    // Step 3. Randomly ignite new 'sparks' of heat near the bottom
    for (int x = 0; x < 16; x++) {
      if (random8() < SPARKING) {
        int y = 15;  // Bottom row
        // Add a random amount of heat to the bottom row
        heat[x][y] = qadd8(heat[x][y], random8(160, 255));
      }
    }

    // Step 4. Map from heat cells to LED colors
    for (int x = 0; x < 16; x++) {
      for (int y = 0; y < 16; y++) {
        // Adjust the heat based on y position to create a fire shape
        int adjustedHeat = qsub8(heat[x][y], map(y, 0, 15, 0, 60));

        // Add some randomness to create flickering
        adjustedHeat = qadd8(adjustedHeat, random8(0, 50));

        // Ensure we get the full range of colors
        adjustedHeat = map(adjustedHeat, 0, 255, 0, 240);

        // Map heat to color using our custom function
        CRGB color = heatColor(adjustedHeat);

        // Dim the colors towards the top of the matrix
        if (y < 8) {
          color.nscale8(map(y, 0, 7, 50, 255));
        }

        // Set the LED color
        leds[XY(x, y)] = color;
      }
    }

    // Display the updated fire effect
    FastLED.show();

    // Non-blocking delay to control animation speed
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 100) {  // Increased delay to 100ms to slow down the animation
      if (currentAnimation != 1) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

// Twinkle animation

void twinkle() {
  while (currentAnimation == 2) {  // Assuming '2' is the code for the twinkle animation
    fadeToBlackBy(leds, NUM_LEDS, 10);  // Reduce the intensity of the fading

    // Add multiple twinkles per iteration to ensure more lights are twinkling
    for (int i = 0; i < 5; i++) {  // Add 5 twinkles instead of 1
      int pos = random16(NUM_LEDS);
      leds[pos] += CHSV(random8(), 200, 255);  // Add a random color twinkle
    }

    FastLED.show();

    // Non-blocking delay function to allow animation interruption
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 50) {  // Approximate 50ms delay
      if (currentAnimation != 2) {
        return;  // Exit the twinkle animation if a different animation is selected
      }
      server.handleClient();  // Handle web server requests during the delay
      delay(1);  // Yield to allow processing other tasks
    }
  }
}

// Solid Red: Fill with red

void solidred() {
  fill_solid(leds, NUM_LEDS, CRGB::Red);
  FastLED.show();
}

// Solid Green: Fill with green

void solidgreen() {
  fill_solid(leds, NUM_LEDS, CRGB::Green);
  FastLED.show();
}

// Solid Blue: Fill with blue

void solidblue() {
  fill_solid(leds, NUM_LEDS, CRGB::Blue);
  FastLED.show();
}

// Colour Wipe Effect

void colorwipe() {
  while (currentAnimation == 8) {  // Keep running while 'colorwipe' is the selected animation
    CRGB randomColor = CHSV(random8(), 255, 255);  // Generate a random color

    for (int i = 0; i < NUM_LEDS; i++) {
      leds[i] = randomColor;  // Set each LED to the random color
      FastLED.show();

      // Add delay inside the function for each LED update
      unsigned long startMillis = millis();
      while (millis() - startMillis < 30) {  // Approximately 50ms delay for each LED
        server.handleClient();  // Handle web requests during delay
        if (currentAnimation != 8) return;  // Exit the loop if a new animation is selected
        delay(1);  // Yield to allow other processes to run
      }

      // Check if the animation has changed after updating each LED
      if (currentAnimation != 8) {
        return;  // Exit if the animation is changed
      }
    }

    FastLED.clear();  // Optionally clear the LEDs after each wipe

    // Add a small delay before the next color wipe cycle
    unsigned long startCycleMillis = millis();
    while (millis() - startCycleMillis < 500) {  // Approximate 500ms pause between full wipes
      server.handleClient();  // Handle web server requests
      if (currentAnimation != 8) return;  // Break out if animation is changed
      delay(1);  // Yield
    }
  }
}

// Plasma Effect

void plasma() {
  while (currentAnimation == 9) {  // Assuming '9' is the code for the plasma animation
    static int t = 0;
    for (int x = 0; x < 16; x++) {
      for (int y = 0; y < 16; y++) {
        // Calculate plasma values
        byte colorIndex = (sin8(x * 10 + t) + sin8(y * 10 + t)) / 2;
        leds[XY(x, y)] = CHSV(colorIndex, 255, 255);  // Apply color to each pixel
      }
    }

    FastLED.show();
    nonBlockingDelay(25);  // Control the speed of the plasma effect

    t += 1;  // Increment time for the plasma wave effect

    // Exit if a different animation is selected
    if (currentAnimation != 9) {
      return;  // Break out of the plasma effect
    }
  }
}

// Bouncing Ball Effect

void bouncingball() {
  // Initialize ball position randomly within the matrix bounds
  static int ballX = random(0, 16);
  static int ballY = random(0, 16);

  // Initialize ball direction with random x and y increments
  static int ballDirX = random(1, 3) * (random(0, 2) * 2 - 1); // Randomly -1 or +1
  static int ballDirY = random(1, 3) * (random(0, 2) * 2 - 1); // Randomly -1 or +1

  while (currentAnimation == 10) {  // Assuming '10' is the code for the bouncing ball animation

    // Clear the LED matrix
    FastLED.clear();

    // Set the ball color
    leds[XY(ballX, ballY)] = CRGB::Blue;  // Change colour as needed

    // Show the current state
    FastLED.show();

    // Update the ball position
    ballX += ballDirX;
    ballY += ballDirY;

    // Check for wall collisions and adjust direction accordingly
    if (ballX >= 15 || ballX <= 0) {
      ballDirX = -ballDirX;  // Reverse direction on X-axis
      ballX = constrain(ballX, 0, 15);  // Keep within bounds
    }
    if (ballY >= 15 || ballY <= 0) {
      ballDirY = -ballDirY;  // Reverse direction on Y-axis
      ballY = constrain(ballY, 0, 15);  // Keep within bounds
    }

    nonBlockingDelay(50);  // Control the speed of the bouncing ball effect

    // Exit if a different animation is selected
    if (currentAnimation != 10) {
      return;  // Break out of the bouncing ball effect
    }
  }
}

// Meteor effect with bright white and fading red trail

#define MAX_METEORS 3      // Adjustable: Maximum number of simultaneous meteors
#define MIN_TRAIL_LENGTH 4 // Adjustable: Minimum trail length
#define MAX_TRAIL_LENGTH 12 // Adjustable: Maximum trail length

// Structure to hold information about each meteor
struct Meteor {
  int x;            // X position of the meteor
  int y;            // Y position of the meteor
  bool active;      // Whether the meteor is currently active
  int trailLength;  // Length of this meteor's trail
};

void meteoreffect() {
  Meteor meteors[MAX_METEORS];

  // Initialize all meteors as inactive
  for (int i = 0; i < MAX_METEORS; i++) {
    meteors[i].active = false;
  }

  while (currentAnimation == 11) {  // 11 is the code for meteor effect
    FastLED.clear();  // Clear the LED matrix

    // Attempt to spawn new meteors
    for (int i = 0; i < MAX_METEORS; i++) {
      if (!meteors[i].active && random(100) < 10) {  // 10% chance to spawn a new meteor each frame
        meteors[i].x = random(0, WIDTH);  // Random x position
        meteors[i].y = 0;  // Start at the top of the screen
        meteors[i].active = true;
        meteors[i].trailLength = random(MIN_TRAIL_LENGTH, MAX_TRAIL_LENGTH + 1);  // Randomize trail length
      }
    }

    // Update and draw meteors
    for (int i = 0; i < MAX_METEORS; i++) {
      if (meteors[i].active) {
        // Set the current meteor position to bright white
        leds[XY(meteors[i].x, meteors[i].y)] = CRGB::White;

        // Create a fading trail
        for (int t = 1; t <= meteors[i].trailLength; t++) {
          int trailY = meteors[i].y - t;
          if (trailY >= 0) {  // Ensure we don't draw above the top of the screen
            // Calculate fade level. Newer trail segments are brighter.
            int fadeLevel = 255 - (t * 255 / meteors[i].trailLength);
            fadeLevel = constrain(fadeLevel, 0, 255);  // Ensure fade level is within valid range
            leds[XY(meteors[i].x, trailY)] = CRGB(fadeLevel, 0, 0);  // Red trail with fade
          }
        }

        // Move the meteor down
        meteors[i].y++;

        // Deactivate meteor if it's off the bottom of the screen
        if (meteors[i].y >= HEIGHT) {
          meteors[i].active = false;
        }
      }
    }

    FastLED.show();  // Display the updated LED matrix
    nonBlockingDelay(100);  // Adjustable: controls the speed of the falling meteors

    // Handle incoming client requests to keep the server responsive
    server.handleClient();

    // Exit if a new animation is selected
    if (currentAnimation != 11) {
      return;
    }
  }
}

// Wave Effect

void waveEffect() {
  // Wave parameters
  const uint8_t waveCount = 3;        // Number of simultaneous waves
  const uint8_t minWaveHeight = 4;    // Minimum height of the waves
  const uint8_t maxWaveHeight = 12;   // Maximum height of the waves
  float waveSpeed = 0.1;              // Speed of wave movement (adjust as needed)

  // Arrays to store wave properties
  float waveOffset[waveCount];        // Horizontal offset of each wave
  uint8_t waveHeight[waveCount];      // Height of each wave

  // Initialize waves with random heights and evenly spaced offsets
  for (int i = 0; i < waveCount; i++) {
    waveOffset[i] = i * (WIDTH / waveCount);
    waveHeight[i] = random(minWaveHeight, maxWaveHeight + 1);
  }

  // Color palette for the waves (from bottom to top)
  CRGB wavePalette[4] = {CRGB::DarkBlue, CRGB::Blue, CRGB::Cyan, CRGB::White};

  while (currentAnimation == 12) {  // Run while this animation is selected
    FastLED.clear();  // Clear the LED matrix

    // Draw each column of the LED matrix
    for (int x = 0; x < WIDTH; x++) {
      // Calculate and draw each wave
      for (int w = 0; w < waveCount; w++) {
        // Calculate wave position using sine function
        float wavePos = (x + waveOffset[w]) * (TWO_PI / WIDTH);
        int baseY = (sin(wavePos) + 1) * (waveHeight[w] / 2);

        // Draw the wave column
        for (int i = 0; i < HEIGHT; i++) {
          if (i < baseY) {
            // Main body of the wave
            CRGB color = blend(wavePalette[0], wavePalette[2], (255 * i) / baseY);
            leds[XY(x, HEIGHT - 1 - i)] = color;
          } else if (i == baseY) {
            // Wave crest (white foam)
            leds[XY(x, HEIGHT - 1 - i)] = wavePalette[3];
          } else if (i == baseY + 1 && baseY > 2) {
            // Curling effect at the top of the wave
            float curlPos = wavePos + PI / 4;  // Offset for curl
            int curlX = x - 1 + round(cos(curlPos));
            if (curlX >= 0 && curlX < WIDTH) {
              leds[XY(curlX, HEIGHT - 1 - i)] = wavePalette[2];  // Cyan curl
            }
          }
        }
      }
    }

    // Move the waves horizontally
    for (int w = 0; w < waveCount; w++) {
      waveOffset[w] += waveSpeed;
      if (waveOffset[w] >= WIDTH) {
        // Reset wave position and randomize height when it reaches the right edge
        waveOffset[w] -= WIDTH;
        waveHeight[w] = random(minWaveHeight, maxWaveHeight + 1);
      }
    }

    FastLED.show();  // Display the updated LED matrix

    // Non-blocking delay to control animation speed
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 50) {  // 50ms delay, adjust for desired speed
      if (currentAnimation != 12) return;  // Exit if a different animation is selected
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

// Conway's Game of Life Effect

void conwaysGameOfLife() {
  // Initialize the grid with random values
  bool grid[HEIGHT][WIDTH];

  for (int y = 0; y < HEIGHT; y++) {
    for (int x = 0; x < WIDTH; x++) {
      grid[y][x] = random(0, 2); // Randomly set cell to alive (true) or dead (false)
    }
  }

  // Function to count alive neighbors, capturing grid by reference
  auto countAliveNeighbors = [&grid](int x, int y) {
    int count = 0;
    for (int dy = -1; dy <= 1; dy++) {
      for (int dx = -1; dx <= 1; dx++) {
        if (dx == 0 && dy == 0) continue; // Skip the cell itself
        int newX = (x + dx + WIDTH) % WIDTH; // Wrap around
        int newY = (y + dy + HEIGHT) % HEIGHT; // Wrap around
        count += grid[newY][newX]; // Increment count if neighbor is alive
      }
    }
    return count;
  };

  // Conway's Game of Life update logic

  while (currentAnimation == 13) {  // Assuming '13' is the code for Game of Life effect
    // Clear the LED matrix
    FastLED.clear();

    // Update the grid and set LED colors based on the grid state
    for (int y = 0; y < HEIGHT; y++) {
      for (int x = 0; x < WIDTH; x++) {
        int aliveNeighbors = countAliveNeighbors(x, y);

        // Apply Game of Life rules
        if (grid[y][x]) { // Cell is alive
          leds[XY(x, y)] = CRGB::Green; // Change color for alive cells
          grid[y][x] = (aliveNeighbors == 2 || aliveNeighbors == 3);
        } else { // Cell is dead
          grid[y][x] = (aliveNeighbors == 3);
          leds[XY(x, y)] = CRGB::Black; // Turn off dead cells
        }
      }
    }

    FastLED.show(); // Show the current state

    // Update the grid for the next generation
    bool newGrid[HEIGHT][WIDTH];
    for (int y = 0; y < HEIGHT; y++) {
      for (int x = 0; x < WIDTH; x++) {
        int aliveNeighbors = countAliveNeighbors(x, y);

        // Apply Game of Life rules
        if (grid[y][x]) { // Cell is alive
          newGrid[y][x] = (aliveNeighbors == 2 || aliveNeighbors == 3);
        } else { // Cell is dead
          newGrid[y][x] = (aliveNeighbors == 3);
        }
      }
    }

    // Copy new grid to the main grid
    memcpy(grid, newGrid, sizeof(grid));

    nonBlockingDelay(100); // Control the speed of the Game of Life effect

    // Exit if a new animation is selected
    if (currentAnimation != 13) {
      return;  // Break out of the Game of Life effect
    }
  }
}

//Fireworks Effect

void fireworksEffect() {
  const int maxRockets = 2;  // Adjustable: Number of simultaneous rockets
  const int maxSparks = 60;  // Adjustable: Number of sparks per explosion (increase for larger explosions)
  const int launchHeight = HEIGHT * 1 / 4;  // Adjustable: Height at which rockets explode (smaller fraction = higher explosion)

  struct Particle {
    float x, y;
    float vx, vy;
    CRGB color;
    int life;
    bool active;
  };

  Particle rockets[maxRockets];
  Particle sparks[maxSparks];

  // Initialize particles
  for (int i = 0; i < maxRockets; i++) {
    rockets[i].active = false;
  }
  for (int i = 0; i < maxSparks; i++) {
    sparks[i].active = false;
  }

  unsigned long lastLaunch = 0;
  const unsigned long launchInterval = 3000;  // Adjustable: Time between rocket launches (in milliseconds)
  unsigned long lastUpdate = 0;
  const unsigned long updateInterval = 50;  // Adjustable: Animation update speed (lower = faster)

  while (currentAnimation == 14 && !animationChanged) {
    unsigned long currentTime = millis();

    server.handleClient();

    if (currentAnimation != 14 || animationChanged) {
      return;
    }

    if (currentTime - lastUpdate >= updateInterval) {
      lastUpdate = currentTime;

      FastLED.clear();

      // Launch new rockets
      if (currentTime - lastLaunch > launchInterval) {
        for (int i = 0; i < maxRockets; i++) {
          if (!rockets[i].active) {
            float angle = TWO_PI * float(i) / float(maxRockets);
            rockets[i] = {
              float(random(2, WIDTH - 2)),
              float(HEIGHT),
              cos(angle) * float(random(5, 10)) / 10,  // Adjustable: Horizontal velocity range
              -float(random(20, 25)) / 10,  // Adjustable: Vertical velocity range (negative for upward movement)
              CHSV(random(256), 255, 255),
              random(40, 60),  // Adjustable: Rocket life range
              true
            };
            lastLaunch = currentTime;
            break;
          }
        }
      }

      // Update and draw rockets
      for (int i = 0; i < maxRockets; i++) {
        if (rockets[i].active) {
          rockets[i].x += rockets[i].vx * 0.8;  // Adjustable: Rocket horizontal speed multiplier
          rockets[i].y += rockets[i].vy * 0.8;  // Adjustable: Rocket vertical speed multiplier
          rockets[i].vy += 0.015;  // Adjustable: Gravity effect on rockets

          rockets[i].x = constrain(rockets[i].x, 0, WIDTH - 1);
          rockets[i].y = constrain(rockets[i].y, 0, HEIGHT - 1);

          rockets[i].life--;

          if (rockets[i].y <= launchHeight || rockets[i].life <= 0 || rockets[i].x <= 0 || rockets[i].x >= WIDTH - 1) {
            // Explode
            for (int j = 0; j < maxSparks; j++) {
              if (!sparks[j].active) {
                float randomFactor = 0.3;  // Adjustable: Spread of the explosion (higher = more spread)
                float angle = TWO_PI * float(j) / float(maxSparks) + random(-randomFactor, randomFactor);
                float baseSpeed = random(3, 7) / 10.0;  // Adjustable: Velocity range for sparks
                float speed = baseSpeed * (1.0 + random(-0.2, 0.2));
                sparks[j] = {
                  rockets[i].x,
                  rockets[i].y,
                  cos(angle) * speed,
                  sin(angle) * speed,
                  rockets[i].color,
                  random(100, 200),  // Adjustable: Spark life range
                  true
                };
              }
            }
            rockets[i].active = false;
          } else {
            int px = int(rockets[i].x);
            int py = int(rockets[i].y);
            leds[XY(px, py)] = rockets[i].color;
          }
        }
      }

      // Update and draw sparks
      for (int i = 0; i < maxSparks; i++) {
        if (sparks[i].active) {
          sparks[i].x += sparks[i].vx * 0.9;  // Adjustable: Spark horizontal speed multiplier
          sparks[i].y += sparks[i].vy * 0.9;  // Adjustable: Spark vertical speed multiplier
          sparks[i].vy += 0.01;  // Adjustable: Gravity effect on sparks

          sparks[i].x = constrain(sparks[i].x, 0, WIDTH - 1);
          sparks[i].y = constrain(sparks[i].y, 0, HEIGHT - 1);

          sparks[i].life--;

          if (sparks[i].life <= 0) {
            sparks[i].active = false;
          } else {
            int px = int(sparks[i].x);
            int py = int(sparks[i].y);
            leds[XY(px, py)] = sparks[i].color.fadeToBlackBy(255 - sparks[i].life * 1.5);  // Adjustable: Fade rate (1.5)
          }
        }
      }

      FastLED.show();
    }
  }
}

// Rain Effect

void raineffect() {
  while (currentAnimation == 15) {  // Continue while rain effect is selected
    // Slowly fade existing raindrops
    // Lower values (e.g., 20) create longer trails
    fadeToBlackBy(leds, NUM_LEDS, 30);

    // Add new raindrops at the top of the matrix
    for (int x = 0; x < 16; x++) {
      if (random8() < 50) {  // 50% chance of a new raindrop in each column
        leds[XY(x, 0)] = CRGB::Blue;  // Set top LED in column to blue
      }
    }

    // Move all LEDs down one row
    for (int y = 15; y > 0; y--) {
      for (int x = 0; x < 16; x++) {
        leds[XY(x, y)] = leds[XY(x, y - 1)];  // Copy LED from row above
      }
    }

    //    // Add splash effect at the bottom
    //    for (int x = 0; x < 16; x++) {
    //      if (random8() < 10) {  // 10% chance for a splash in each column
    //        leds[XY(x, 15)] = CRGB::Blue;  // Set bottom LED in column to blue
    //      }
    //    }

    FastLED.show();  // Update the LED matrix display

    // Non-blocking delay for smooth animation
    nonBlockingDelay(150);  // 150ms delay between frames

    // Check if a new animation has been selected
    if (currentAnimation != 15) {
      return;  // Exit the rain effect if a different animation is chosen
    }
  }
}

// Code Matrix Effect

void matrixCodeRain() {
  while (currentAnimation == 16) {  // Assuming '16' is the code for the code rain effect
    // Generate new "code rain" at the top row
    for (int x = 0; x < 16; x++) {
      if (random8() < 100) {
        leds[XY(x, 0)] = CHSV(85, 255, 255);  // Bright green "code"
      } else {
        leds[XY(x, 0)] = CRGB::Black;
      }
    }

    // Shift all rows down
    for (int y = 15; y > 0; y--) {
      for (int x = 0; x < 16; x++) {
        leds[XY(x, y)] = leds[XY(x, y - 1)];
      }
    }

    FastLED.show();
    nonBlockingDelay(100);  // Use non-blocking delay for smoother effect

    // Exit if a new animation is selected
    if (currentAnimation != 16) {
      return;  // Break out of the code rain effect
    }
  }
}

// Rotating Lines Effect with Randomized Color

void rotatingLines() {
  static uint8_t angle = 0;  // Maintain the angle across function calls

  while (currentAnimation == 17) {  // Assuming '17' is the code for the rotating lines effect
    angle++;  // Increment the angle for rotation

    // Clear the LED matrix first
    FastLED.clear();

    // Generate a random color for each iteration
    CRGB color = CHSV(random8(0, 255), 255, 255);  // Random hue with full saturation and brightness

    for (int i = 0; i < 16; i++) {
      leds[XY(i, (i + angle) % 16)] = color;  // Set the rotating line position with the random color
    }

    FastLED.show();
    nonBlockingDelay(50);  // Use non-blocking delay for smoother effect

    fadeToBlackBy(leds, NUM_LEDS, 64);  // Fade out slowly

    // Exit if a new animation is selected
    if (currentAnimation != 17) {
      return;  // Break out of the rotating lines effect
    }
  }
}

// Circular Effect with Randomized Color

void circularSpin() {
  static uint8_t angle = 0;  // Maintain the angle across function calls

  while (currentAnimation == 18) {  // Assuming '18' is the code for the rotating lines effect
    angle++;  // Increment the angle for rotation

    // Clear the LED matrix first
    FastLED.clear();

    // Generate a random color for each iteration
    CRGB color = CHSV(random8(0, 255), 255, 255);  // Random hue with full saturation and brightness

    // Calculate the center of the matrix
    int centerX = 8;  // Half of 16 (matrix width)
    int centerY = 8;  // Half of 16 (matrix height)

    // Draw lines at varying angles
    for (int i = 0; i < 16; i++) {
      // Calculate positions for the line endpoints based on the angle
      int x1 = centerX + cos(radians(angle + (i * 22.5))) * 7;  // Adjust the length as needed
      int y1 = centerY + sin(radians(angle + (i * 22.5))) * 7;  // Adjust the length as needed
      int x2 = centerX + cos(radians(angle + (i * 22.5))) * -7; // Adjust the length as needed
      int y2 = centerY + sin(radians(angle + (i * 22.5))) * -7; // Adjust the length as needed

      // Draw the lines
      if (x1 >= 0 && x1 < 16 && y1 >= 0 && y1 < 16) {
        leds[XY(x1, y1)] = color;  // Set the color at (x1, y1)
      }
      if (x2 >= 0 && x2 < 16 && y2 >= 0 && y2 < 16) {
        leds[XY(x2, y2)] = color;  // Set the color at (x2, y2)
      }
    }

    FastLED.show();
    nonBlockingDelay(50);  // Use non-blocking delay for smoother effect

    fadeToBlackBy(leds, NUM_LEDS, 64);  // Fade out slowly

    // Exit if a new animation is selected
    if (currentAnimation != 17) {
      return;  // Break out of the circular spin effect
    }
  }
}

//Ripple Effect

void rippleEffect() {
  static uint8_t colour;
  static uint8_t center_x = WIDTH / 2;
  static uint8_t center_y = HEIGHT / 2;
  static int8_t step = -1;
  static uint8_t maxSteps = 16;
  static uint8_t myfade = 255;

  while (currentAnimation == 19) {  // Use animation 19 for ripple effect
    // Initialize ripple variables.
    if (step == -1) {
      center_x = random(WIDTH);
      center_y = random(HEIGHT);
      colour = random8();
      step = 0;
      myfade = 255;
    }

    // Clear the LED matrix
    fadeToBlackBy(leds, NUM_LEDS, 64);

    // Draw the ripple
    for (int i = 0; i < WIDTH; i++) {
      for (int j = 0; j < HEIGHT; j++) {
        float distance = sqrt(pow(i - center_x, 2) + pow(j - center_y, 2));
        if (distance <= step && distance >= step - 2) {
          leds[XY(i, j)] = ColorFromPalette(RainbowColors_p, colour, myfade);
        }
      }
    }

    // Update ripple state
    step++;
    myfade -= 8;

    // Reset the ripple if it's finished
    if (step >= maxSteps) {
      step = -1;
    }

    FastLED.show();

    // Non-blocking delay with escape check
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 100) {  // 50ms delay, adjust for desired speed
      if (currentAnimation != 19) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

//Starfield Effect

void starfieldEffect() {
  // Define star parameters
  const uint8_t NUM_STARS = 40;  // Adjust for desired star density
  static uint8_t starX[NUM_STARS];
  static uint8_t starY[NUM_STARS];
  static uint8_t starBrightness[NUM_STARS];
  static uint8_t starSpeed[NUM_STARS];

  // Initialize stars if needed
  static bool initialized = false;
  if (!initialized) {
    for (int i = 0; i < NUM_STARS; i++) {
      starX[i] = random8(WIDTH);
      starY[i] = random8(HEIGHT);
      starBrightness[i] = random8(50, 255);
      starSpeed[i] = random8(1, 4);
    }
    initialized = true;
  }

  while (currentAnimation == 20) {  // Assuming 20 is the code for starfield effect
    // Fade all LEDs
    fadeToBlackBy(leds, NUM_LEDS, 40);

    // Update and draw stars
    for (int i = 0; i < NUM_STARS; i++) {
      // Move star
      starY[i] += starSpeed[i];

      // If star has moved off screen, reset it
      if (starY[i] >= HEIGHT) {
        starX[i] = random8(WIDTH);
        starY[i] = 0;
        starBrightness[i] = random8(50, 255);
        starSpeed[i] = random8(1, 4);
      }

      // Draw star
      leds[XY(starX[i], starY[i])] = CHSV(0, 0, starBrightness[i]);
    }

    FastLED.show();

    // Non-blocking delay with escape check
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 150) {  // 50ms delay, adjust for desired speed
      if (currentAnimation != 20) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

//Kaleidoscope Effect

void kaleidoscopeEffect() {
  static uint8_t hue = 0;

  while (currentAnimation == 21) {  // Assuming 21 is the code for kaleidoscope effect
    // Clear the LED matrix
    FastLED.clear();

    // Generate a quarter of the kaleidoscope
    for (uint8_t x = 0; x < WIDTH / 2; x++) {
      for (uint8_t y = 0; y < HEIGHT / 2; y++) {
        // Create a unique color for each pixel
        uint8_t pixelHue = hue + (x * y);
        CRGB color = CHSV(pixelHue, 255, 255);

        // Set the pixel in all four quadrants
        leds[XY(x, y)] = color;
        leds[XY(WIDTH - 1 - x, y)] = color;
        leds[XY(x, HEIGHT - 1 - y)] = color;
        leds[XY(WIDTH - 1 - x, HEIGHT - 1 - y)] = color;
      }
    }

    // Rotate hue for animation
    hue++;

    FastLED.show();

    // Non-blocking delay with escape check
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 50) {  // 50ms delay, adjust for desired speed
      if (currentAnimation != 21) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

//Fractal Effect

void fractals() {
  static uint8_t hue = 0;
  static uint8_t scale = 8;
  static int8_t direction = 1;

  while (currentAnimation == 22) {  // Assuming 22 is the code for mandelbrot effect
    // Clear the LED matrix
    FastLED.clear();

    // Generate a fractal-inspired pattern
    for (uint8_t x = 0; x < WIDTH; x++) {
      for (uint8_t y = 0; y < HEIGHT; y++) {
        uint8_t noise = inoise8(x * scale, y * scale, millis() / 10);
        uint8_t brightness = noise > 127 ? 255 : 0;  // Create a binary pattern
        leds[XY(x, y)] = CHSV(hue + noise / 2, 255, brightness);
      }
    }

    // Rotate hue for color cycling
    hue++;

    // Adjust scale for zooming effect
    scale += direction;
    if (scale == 4 || scale == 32) direction *= -1;  // Reverse direction at extremes

    FastLED.show();

    // Non-blocking delay with escape check
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 100) {  // 100ms delay, adjust for desired speed
      if (currentAnimation != 22) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

//Colour Waves

void colourWaves() {
  static uint16_t sPseudotime = 0;
  static uint16_t sLastMillis = 0;
  static uint16_t sHue16 = 0;

  uint8_t sat8 = beatsin88(87, 220, 250);
  uint8_t brightdepth = beatsin88(341, 96, 224);
  uint16_t brightnessthetainc16 = beatsin88(203, 1, 3);
  uint8_t msmultiplier = beatsin88(147, 23, 60);

  uint16_t hue16 = sHue16;
  uint16_t hueinc16 = beatsin88(113, 1, 3000);

  uint16_t ms = millis();
  uint16_t deltams = ms - sLastMillis;
  sLastMillis = ms;
  sPseudotime += deltams * msmultiplier;
  sHue16 += deltams * beatsin88(400, 5, 9);
  uint16_t brightnesstheta16 = sPseudotime;

  while (currentAnimation == 23) {  // Assuming 23 is the code for Color Waves effect
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
      hue16 += hueinc16;
      uint8_t hue8 = hue16 / 256;

      brightnesstheta16 += brightnessthetainc16;
      uint16_t b16 = sin16(brightnesstheta16) + 32768;

      uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
      uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
      bri8 += (255 - brightdepth);

      CRGB newcolor = CHSV(hue8, sat8, bri8);

      uint16_t pixelnumber = i;
      pixelnumber = (NUM_LEDS - 1) - pixelnumber;

      nblend(leds[pixelnumber], newcolor, 64);
    }

    FastLED.show();

    // Non-blocking delay with escape check
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 20) {  // 20ms delay, adjust for desired speed
      if (currentAnimation != 23) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

//Lissajous Curves

void lissajousCurves() {
  static float t = 0;
  static uint8_t hue = 0;
  const float a = 3;  // Frequency ratio for x
  const float b = 2;  // Frequency ratio for y
  const float delta = PI / 2;  // Phase difference

  while (currentAnimation == 24) {  // Assuming 24 is the code for Lissajous Curves
    FastLED.clear();

    // Calculate x and y coordinates
    float x = 7.5 + 7.5 * sin(a * t + delta);
    float y = 7.5 + 7.5 * sin(b * t);

    // Draw the curve
    leds[XY(round(x), round(y))] = CHSV(hue, 255, 255);

    FastLED.show();

    // Increment t and hue
    t += 0.05;
    hue++;

    // Non-blocking delay with escape check
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 20) {  // 20ms delay, adjust for desired speed
      if (currentAnimation != 24) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

//Perlin Noise Pattern

void perlinNoisePattern() {
  static uint16_t x = 0;
  static uint16_t y = 0;
  static uint16_t z = 0;
  static uint8_t hue = 0;

  while (currentAnimation == 25) {  // Assuming 25 is the code for Perlin Noise Pattern
    for (uint8_t i = 0; i < WIDTH; i++) {
      for (uint8_t j = 0; j < HEIGHT; j++) {
        // Calculate noise value
        uint8_t noise = inoise8(i * 20 + x, j * 20 + y, z);

        // Map noise value to hue
        uint8_t hue = map(noise, 0, 255, 0, 255);

        // Set LED color
        leds[XY(i, j)] = CHSV(hue, 255, noise);
      }
    }

    FastLED.show();

    // Move through noise space
    x += 10;
    y += 10;
    z += 2;

    // Slowly change base hue
    hue++;

    // Non-blocking delay with escape check
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 50) {  // 50ms delay, adjust for desired speed
      if (currentAnimation != 25) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

//Lava Lamp Effect

void lavaLampEffect() {
  static uint8_t hue = 0;
  static uint16_t timeDisplacement = 0;

  // Lava lamp colors
  CRGB lavaColor1 = CHSV(hue, 255, 255);
  CRGB lavaColor2 = CHSV(hue + 128, 255, 255);

  while (currentAnimation == 26) {  // Assuming 26 is the code for Lava Lamp effect
    timeDisplacement += 10;

    for (uint8_t x = 0; x < WIDTH; x++) {
      for (uint8_t y = 0; y < HEIGHT; y++) {
        // Calculate noise values
        uint8_t noise1 = inoise8(x * 30, y * 30, timeDisplacement);
        uint8_t noise2 = inoise8(x * 30, y * 30, timeDisplacement + 10000);

        // Blend between the two lava colors based on noise
        CRGB pixelColor = blend(lavaColor1, lavaColor2, noise1);

        // Add some brightness variation
        uint8_t brightness = map(noise2, 0, 255, 128, 255);
        pixelColor.nscale8(brightness);

        leds[XY(x, y)] = pixelColor;
      }
    }

    FastLED.show();

    // Slowly change hue for color variation
    EVERY_N_MILLISECONDS(100) {
      hue++;
    }

    // Non-blocking delay with escape check
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 50) {  // 50ms delay, adjust for desired speed
      if (currentAnimation != 26) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

//Maze Generator

#define WALL CRGB(0, 0, 0)  // Black
#define PATH CRGB(0, 255, 0)  // Green
#define CURRENT CRGB(255, 0, 0)  // Red

bool maze[16][16];  // true for walls, false for paths
int currentX, currentY;
int stack[256][2];  // Stack to keep track of path
int stackTop = 0;

void initMaze() {
  // Initialize all cells as walls
  for (int x = 0; x < 16; x++) {
    for (int y = 0; y < 16; y++) {
      maze[x][y] = true;
    }
  }
  currentX = 0;
  currentY = 0;
  maze[currentX][currentY] = false;
  stack[stackTop][0] = currentX;
  stack[stackTop][1] = currentY;
  stackTop++;
}

void drawMaze() {
  for (int x = 0; x < 16; x++) {
    for (int y = 0; y < 16; y++) {
      leds[XY(x, y)] = maze[x][y] ? WALL : PATH;
    }
  }
  // Draw current position
  leds[XY(currentX, currentY)] = CURRENT;
}

bool isValid(int x, int y) {
  return x >= 0 && x < 16 && y >= 0 && y < 16;
}

bool hasUnvisitedNeighbor(int x, int y) {
  int directions[4][2] = {{0, -2}, {2, 0}, {0, 2}, { -2, 0}};
  for (int i = 0; i < 4; i++) {
    int newX = x + directions[i][0];
    int newY = y + directions[i][1];
    if (isValid(newX, newY) && maze[newX][newY]) {
      return true;
    }
  }
  return false;
}

void mazeGeneratorEffect() {
  initMaze();

  while (currentAnimation == 27) {  // Assuming 27 is the code for Maze Generator effect
    drawMaze();
    FastLED.show();

    if (hasUnvisitedNeighbor(currentX, currentY)) {
      int directions[4][2] = {{0, -2}, {2, 0}, {0, 2}, { -2, 0}};
      int availableDirections[4];
      int availableCount = 0;

      for (int i = 0; i < 4; i++) {
        int newX = currentX + directions[i][0];
        int newY = currentY + directions[i][1];
        if (isValid(newX, newY) && maze[newX][newY]) {
          availableDirections[availableCount++] = i;
        }
      }

      if (availableCount > 0) {
        int dir = availableDirections[random(availableCount)];
        int newX = currentX + directions[dir][0];
        int newY = currentY + directions[dir][1];

        maze[newX][newY] = false;
        maze[currentX + directions[dir][0] / 2][currentY + directions[dir][1] / 2] = false;
        currentX = newX;
        currentY = newY;

        stack[stackTop][0] = currentX;
        stack[stackTop][1] = currentY;
        stackTop++;
      }
    } else if (stackTop > 0) {
      // Backtrack
      stackTop--;
      currentX = stack[stackTop][0];
      currentY = stack[stackTop][1];
    } else {
      // If stack is empty, maze is complete
      initMaze();  // Start a new maze
    }

    Serial.printf("Current position: (%d, %d)\n", currentX, currentY);

    // Non-blocking delay with escape check
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 100) {  // 100ms delay, adjust for desired speed
      if (currentAnimation != 27) {
        return;  // Exit if a different animation is selected
      }
      server.handleClient();  // Handle any incoming web requests
      delay(1);  // Short delay to allow other processes to run
    }
  }
}

// Arcade Sprites: - Infinite Loop
void arcadesprites() {
  while (currentAnimation == 7) {  // Assuming '7' is the code for the arcade sprite animation

    // Animation sequence: DigDug

    int digDugRepetitions = 8;  // Define how many times to loop the DigDug frames
    for (int runCount = 0; runCount < digDugRepetitions; runCount++) {

      // Display DigDug first frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(DigDug01[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Delay for switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display DigDug second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(DigDug02[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Delay for switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Qbert
    int qbertRepetitions = 8;  // Define how many times to loop the Qbert frames
    for (int runCount = 0; runCount < qbertRepetitions; runCount++) {

      // Display Qbert first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Qbert01[i]));
      }
      FastLED.show();
      nonBlockingDelay(500);  // Delay for switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Qbert second frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Qbert02[i]));
      }
      FastLED.show();
      nonBlockingDelay(500);  // Delay for switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Bombjack
    int bombjackRepetitions = 8;  // Define how many times to loop the Bombjack frames
    for (int runCount = 0; runCount < bombjackRepetitions; runCount++) {

      // Display Bombjack first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BombJack01[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bombjack second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BombJack02[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: The Glob
    int theglobRepetitions = 4;  // Define how many times to loop TheGlob frames
    for (int runCount = 0; runCount < theglobRepetitions; runCount++) {
      // Display TheGlob first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob01[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob02[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob03[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob04[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob05[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob06[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob seventh frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob07[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Pengo Dance
    int pengodanceRepetitions = 4;  // Define how many times to loop Pengodance frames
    for (int runCount = 0; runCount < pengodanceRepetitions; runCount++) { // Sets first run count to 0
      // Display Pengo Dance first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance04[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance05[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance06[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance seventh frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance07[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance eighth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance08[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance ninth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance09[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance tenth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance10[i]));
      }

      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Ms Pacman
    int mspacmanRepetitions = 6;  // Define how many times to loop Mspacman frames
    for (int runCount = 0; runCount < mspacmanRepetitions; runCount++) { // Sets first run count to 0
      // Display Ms Pacman first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman01[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman03[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman01[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman seventh frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman03[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman eigth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman ninth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman01[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Space Invaders
    int invadersRepetitions = 6;  // Define how many times to loop Invaders frames
    for (int runCount = 0; runCount < invadersRepetitions; runCount++) { // Sets first run count to 0
      // Display Space Invaders first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders04[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders05[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders06[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Attack UFO
    int attackufoRepetitions = 6;  // Define how many times to loop Attack UFO frames
    for (int runCount = 0; runCount < attackufoRepetitions; runCount++) { // Sets first run count to 0
      // Display Attack UFO first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo01[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Attack UFO second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo02[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Attack UFO third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo03[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Attack UFO fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo04[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Attack UFO fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo05[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Birdy Try
    int birdytryRepetitions = 6;  // Define how many times to loop Birdy Try frames
    for (int runCount = 0; runCount < birdytryRepetitions; runCount++) { // Sets first run count to 0
      // Display Birdy Try first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry10[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry11[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry12[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry13[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry14[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry15[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try seventh frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry16[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Mario
    int marioRepetitions = 6;  // Define how many times to loop Mario frames
    for (int runCount = 0; runCount < marioRepetitions; runCount++) { // Sets first run count to 0
      // Display Mario first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(dkmario02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Mario second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(dkmario03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Bombjack2
    int bombjack2Repetitions = 6;  // Define how many times to loop Bombjack2 frames
    for (int runCount = 0; runCount < bombjack2Repetitions; runCount++) { // Sets first run count to 0
      // Display Bombjack first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bombjack03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bombjack second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bombjack04[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Frogger
    int froggerRepetitions = 6;  // Define how many times to loop Frogger frames
    for (int runCount = 0; runCount < froggerRepetitions; runCount++) { // Sets first run count to 0
      // Display Frogger first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(frogger01[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Frogger second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(frogger02[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Frogger third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(frogger03[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Bagman
    int bagmanRepetitions = 6;  // Define how many times to loop Bagman frames
    for (int runCount = 0; runCount < bagmanRepetitions; runCount++) { // Sets first run count to 0
      // Display Bagman first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bagman01[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bagman second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bagman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bagman third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bagman03[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bagman fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bagman05[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Mr Do
    int mrdoballRepetitions = 6;  // Define how many times to loop Mr Do frames
    for (int runCount = 0; runCount < mrdoballRepetitions; runCount++) { // Sets first run count to 0
      // Display Mr Do first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mrdoball01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Mr Do second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mrdoball02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Bubble Bobble
    int bbobbleRepetitions = 6;  // Define how many times to loop Bubble Bobble frames
    for (int runCount = 0; runCount < bbobbleRepetitions; runCount++) { // Sets first run count to 0
      // Display Bubble Bobble first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bbobble01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bubble Bobble second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bbobble02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bubble Bobble third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bbobble03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Galaga Butterfly

    int galagabflyRepetitions = 6;  // Define how many times to loop Galaga Butterfly frames
    for (int runCount = 0; runCount < galagabflyRepetitions; runCount++) { // Sets first run count to 0
      // Display Galaga Butterfly first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(GalagaBfly01[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Galaga Butterfly second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(GalagaBfly02[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Burgertime

    int BTimeRepetitions = 6;  // Define how many times to loop Burgertime frames
    for (int runCount = 0; runCount < BTimeRepetitions; runCount++) { // Sets first run count to 0

      // Display Burgertime Butterfly first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BTime01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Burgertime second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BTime02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Mappy

    int mappyRepetitions = 6;  // Define how many times to loop Mappy frames
    for (int runCount = 0; runCount < mappyRepetitions; runCount++) { // Sets first run count to 0
      // Display Mappy first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Mappy01[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Mappy second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Mappy02[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Mappy third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Mappy03[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Space Firebird

    int firebirdRepetitions = 6;  // Define how many times to loop Space Firebird frames
    for (int runCount = 0; runCount < firebirdRepetitions; runCount++) { // Sets first run count to 0

      // Display Space Firebird first frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird01[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird second frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird02[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird third frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird03[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird fourth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird04[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird fifth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird05[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird sixth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird06[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird seventh frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird07[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird eighth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird08[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird ninth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird09[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird tenth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird10[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird eleventh frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird11[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird twelfth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird10[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird 13th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird09[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird 14th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird07[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird 15th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird06[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird 16th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird05[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Display Space Firebird 17th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird04[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird 18th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird03[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird 19th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird02[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird 20th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird01[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Optionally add a small delay before the next full cycle starts to avoid rapid looping
    nonBlockingDelay(100);  // Add a short delay between complete runs if desired for this Arcade Sprite only Loop. The number is the length of time before beginning the loop again.
  }
}
