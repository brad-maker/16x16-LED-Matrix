// A selectable array of animations with stop code and Wifi controllable
// from a self-hosted webpage on the ESP32

#include <WiFi.h> //Includes the default Arduino WiFi Library
#include <WebServer.h> //Includes the default Arduino WebServer
#include <FS.h> //Includes the default Arduino File Server function
#include <SPIFFS.h> //Includes Arduino File Storage function
#include <FastLED.h> //Includes the FastLED Module for RGB light controls

// Set your custom Access Point (AP) credentials
const char* ap_ssid = "16x16 LED Panel"; //ESP32 SSID when is Access Point Mode
const char* ap_password = "12345678";  // Optional password, must be at least 8 characters

// Set your custom device name (hostname)
const char* deviceName = "arcadeledpanel"; //Devices Host Name

// LED panel configuration
#define LED_PIN     16          // The data pin being used on the ESP32
#define NUM_LEDS    256         // 16x16=256 LED panel. This is the number of LEDs being controlled
#define WIDTH       16          // Width of the LED matrix
#define HEIGHT      16          // Height of the LED matrix

// Create LED array for FastLED
CRGB leds[NUM_LEDS];            

// Create an instance of the WebServer on port 80
WebServer server(80);

// Handler for the root path to serve the HTML page
void handleRoot() {
  if (SPIFFS.exists("/index.html")) {
    File file = SPIFFS.open("/index.html", "r");
    server.streamFile(file, "text/html");
    file.close();
  } else {
    server.send(404, "text/plain", "File not found");
  }
}

// Global variables
int currentAnimation = 0; // 0 indicates no animation
bool animationChanged = false; // Track if the animation has changed

// Function to stop the current animation and reset LEDs
void stopAnimation() {
  FastLED.clear();
  FastLED.show();
}

// Function prototypes
void stopCurrentAnimation();
void handleSetAnimation();  // Function prototype

// Helper function to convert XY coordinates to LED index
//int XY(int x, int y) {
//  return (y * 16) + x; // Adjust based on your matrix wiring
//}

void loop() {
  server.handleClient(); // Handle web server requests

  // Check if the animation has changed
  if (animationChanged) {
    stopAnimation(); // Stop the current animation
    animationChanged = false; // Reset the flag
  }

  // Check the current animation and run it in a loop
  switch (currentAnimation) {
    case 1:
      fireEffect(); 
      break;
    case 2:
      twinkle(); 
      break;
    case 3:
      rainbow(); 
      break;
    case 4:
      solidred(); 
      break;
    case 5:
      solidgreen(); 
      break;
    case 6:
      solidblue(); 
      break;
    case 7:
      arcadesprites(); 
      break;
    case 8:
      colorwipe(); 
      break;
    case 9:
      plasma(); 
      break;
    case 10:
      bouncingball(); 
      break;
    case 11:
      meteoreffect(); 
      break;
    case 12:
      waveeffect(); 
      break;
    case 13:
      conwaysGameOfLife(); 
      break;
    case 14:
      fireworksEffect(); 
      break;
    case 15:
      raineffect(); 
      break;
    case 16:
      matrixCodeRain(); 
      break;
    case 17:
      rotatingLines(); 
      break;       
    case 18:
      circularSpin(); 
      break;       
    // Add more cases for other animations
    default:
      break; // No animation selected
  }
}

// Function to handle setting the animation based on the received argument
void handleSetAnimation() {
  if (server.hasArg("animation")) {
    String animationName = server.arg("animation");
    Serial.println("Animation requested: " + animationName);
    
    // Determine the animation index based on the name
    if (animationName == "fireEffect") {
      currentAnimation = 1;  // Use integer values
    } else if (animationName == "twinkle") {
      currentAnimation = 2;
    } else if (animationName == "rainbow") {
      currentAnimation = 3;
    } else if (animationName == "solidred") {
      currentAnimation = 4;
    } else if (animationName == "solidgreen") {
      currentAnimation = 5;
    } else if (animationName == "solidblue") {
      currentAnimation = 6;
    } else if (animationName == "arcadesprites") {
      currentAnimation = 7;
    } else if (animationName == "colorwipe") {
      currentAnimation = 8;
    } else if (animationName == "plasma") {
      currentAnimation = 9;
    } else if (animationName == "bouncingball") {
      currentAnimation = 10;
    } else if (animationName == "meteoreffect") {
      currentAnimation = 11;
    } else if (animationName == "waveeffect") {
      currentAnimation = 12;
    } else if (animationName == "conwaysGameOfLife") {
      currentAnimation = 13;
    } else if (animationName == "fireworksEffect") {
      currentAnimation = 14;
    } else if (animationName == "raineffect") {
      currentAnimation = 15;
    } else if (animationName == "matrixCodeRain") {
      currentAnimation = 16;
    } else if (animationName == "rotatingLines") {
      currentAnimation = 17;
    } else if (animationName == "circularSpin") {
      currentAnimation = 18;
    } else {
      currentAnimation = 0;  // No animation selected
    }

    animationChanged = true;  
    server.send(200, "text/plain", "Animation set to: " + animationName);
  } else {
    server.send(400, "text/plain", "Bad Request: Missing 'animation' parameter");
  }
}

void setup() {
  // Initialize Serial for debugging
  Serial.begin(115200);
  delay(1000);  // Allow time for Serial Monitor to initialize

  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {  // The 'true' parameter formats the filesystem if necessary
    Serial.println("Failed to mount SPIFFS");
    return;
  }
  Serial.println("SPIFFS mounted successfully");

  // Initialize LED panel
  FastLED.addLeds<WS2812, LED_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(15); //Default brightness
  FastLED.clear();
  FastLED.show();

  // Set up Wi-Fi in AP mode
  WiFi.softAP(ap_ssid, ap_password);
  Serial.println("ESP32 started in AP mode");

  // Display the IP address of the AP
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  // Define server routes
  server.on("/", handleRoot);
  server.on("/setAnimation", handleSetAnimation);  // Start animation
  server.on("/setBrightness", handleSetBrightness); // Set brightness
  server.on("/poweroff", handlePowerOff); // Power Off

  // Start the server
  server.begin();
  Serial.println("Server started");
}

// Handler for powering off the ESP32
void handlePowerOff() {
  Serial.println("Powering off...");
  esp_deep_sleep(10 * 1000000); // Sleep for 10 seconds
}

// Helper function to add non-blocking delay. This helps the stop animation command.
void nonBlockingDelay(int milliseconds) {
  unsigned long start = millis();
  while (millis() - start < milliseconds) {
    // Handle incoming client requests during delay
    server.handleClient();  
    delay(1);  // 1ms delay, checking frequently
  }
}

// Global LED brightness variable (0-255)
int ledBrightness = 15;  // Default brightness level

// Function to handle LED brightness update
void handleSetBrightness() {
  if (server.hasArg("brightness")) {
    String brightnessStr = server.arg("brightness");
    int brightnessValue = brightnessStr.toInt();
    brightnessValue = constrain(brightnessValue, 0, 255);  // Ensure the brightness is within valid range
    ledBrightness = brightnessValue;  // Update the global brightness variable
    FastLED.setBrightness(ledBrightness);  // Set the brightness for LEDs
    FastLED.show();  // Update the LED panel
    Serial.println("Brightness set to: " + String(ledBrightness));
    server.send(200, "text/plain", "Brightness set to " + String(ledBrightness));  // Send response
  } else {
    server.send(400, "text/plain", "Brightness not specified");
  }
}

// Create the array of retro arcade characters and store it in Flash memory
const long DigDug01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000,
0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000,
0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xCCCCCC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long DigDug02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000,
0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x000000, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000,
0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xCCCCCC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x0066CC, 0x0066CC, 0x0066CC, 0x0066CC, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0x0066CC, 0x0066CC, 0x0066CC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000,
0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0xCCCCCC, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Qbert01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
0x000000, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xffffcc, 0xffffcc, 0xff0033, 0xffffcc, 0xffffcc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 
0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033,  
0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 
0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0x000000, 0xff0033, 0xff0033, 0x000033, 0x000033, 0xff6600, 0x000000, 
0x000000, 0xff0033, 0x000033, 0x000033, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0x000000,
};

const long Qbert02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
0x000000, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xffffff, 0xffffff, 0xff0033, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0xff0033, 0x000000, 
0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 
0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 
0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff0033,
0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000, 0xff6600, 0x000000, 
0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0x000000,
};

const long BombJack01[] PROGMEM =
{
0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366,
0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0xffffff, 0x0099ff, 0xffffff, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x333366, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0xffffff, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffffff, 0x333366, 0x333366, 0x333366, 0x333366,
0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0x333366, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0xff0000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x333366, 0x333366, 
0x333366, 0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000, 0x333366, 0x333366, 
0x333366, 0x333366, 0x000000, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0xffff00, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x000000, 0x333366, 
0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0x333366, 0x333366, 
0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0x333366,  
0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x333366, 0x333366, 0x333366,
};

const long BombJack02[] PROGMEM =
{
0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366, 
0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0x000000, 0x000000, 0x333366, 0x0099ff, 0xffffff, 0xffffff, 0xffcc99, 0xffffff, 0xffffff, 0x0099ff, 0x333366, 0x000000, 0x000000, 0x333366,
0x333366, 0x000000, 0x000000, 0xff0000, 0xffcc99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffcc99, 0xff0000, 0x000000, 0x000000, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xffffff, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffffff, 0xff0000, 0xff0000, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0x333366, 0x333366, 0x333366, 
0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0x000000, 0xff0000, 0x000000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0x333366, 0x333366, 
0x333366, 0x333366, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0x333366, 0x333366, 
0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0xffff00, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0xffffff, 0xffffff, 0x333366,
0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x333366, 
0x333366, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0x333366, 0x333366, 0x333366, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0x333366, 0xffffff, 0xffffff, 0x333366, 0x333366, 
0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x333366, 0x333366, 0x333366,
};

const long TheGlob01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long TheGlob02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
};

const long TheGlob03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x00B0F0, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long TheGlob04[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0,
};

const long TheGlob05[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long TheGlob06[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0,
0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long TheGlob07[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000,
0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long pengodance01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x06FA1D, 0x06FA1D, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0x000000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000, 0x06FA1D,
0x06FA1D, 0x000000, 0x06FA1D, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x06FA1D, 0x000000,
0x000000, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x06FA1D, 0x06FA1D, 0xFF0000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D,
0x000000, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x000000,
};

const long pengodance02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x000000,
0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0x000000,
0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000,
0x000000, 0x000000, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long pengodance03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000, 0x000000,
0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00,
0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00,
0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00,
0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
};

const long pengodance04[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000,
0x00FF00, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x00FF00,
0x00FF00, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00,
0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long pengodance05[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000,
0x00FF00, 0x00FF00, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x00FF00,
0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00,
0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x00FF00,
0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000,
0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
};

const long pengodance06[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000,
0x00FF00, 0x00FF00, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x00FF00, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00,
0x00FF00, 0x00FF00, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long pengodance07[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x00FF00, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000,
0x000000, 0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000,
0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000,
0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
};

const long pengodance08[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000,
0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000,
0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000,
};

const long pengodance09[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x00FF00, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x00FF00,
0x00FF00, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x00FF00,
0x00FF00, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x00FF00,
0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00,
0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x00FF00, 0x00FF00, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x00FF00, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x00FF00, 0x000000,
0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000,
0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00,
};

const long pengodance10[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFFFFFF, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00,
0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x00FF00, 0x00FF00, 0x00FF00,
0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
0x00FF00, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x00FF00,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000,
};

const long mspacman01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0x000000, 0x0000FF, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long mspacman02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0x000000, 0x0000FF, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long mspacman03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0xFF0000, 0xFF0000, 0x0000FF, 0xFF0000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFF00, 0xFFFF00, 0x000000, 0x0000FF, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long invaders03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders04[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders05[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long invaders06[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long attackufo01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000,
0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
};

const long attackufo02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000,
0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long attackufo03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA,
0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long attackufo04[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000,
0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000,
0x000000, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000,
0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x000000, 0x000000,
0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x40F1FA, 0x40F1FA, 0x000000, 0x40F1FA, 0x000000,
0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long attackufo05[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x40F1FA, 0x000000, 0x000000, 0x000000,
};

const long birdytry10[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry11[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry12[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry13[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF,
0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry14[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000,
0x000000, 0x2E2EF6, 0x000000, 0x000000, 0xFFFFFF, 0xF8A6F2, 0x000000, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0xFFFFFF, 0x000000,
0xFFFFFF, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000,
0xFFFFFF, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long birdytry15[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0xFFFFFF,
0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0x000000, 0xF8A6F2, 0x000000, 0x000000, 0x000000, 0x000000,
0xFFFFFF, 0x000000, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000,
0xFFFFFF, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0xFFFFFF, 0xFFFFFF,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0x000000, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0x000000, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000,
0xFFFFFF, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0x000000, 0x000000,
0xFFFFFF, 0x000000, 0xFFFFFF, 0xF8A6F2, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xFFFFFF, 0x2E2EF6, 0x000000, 0xFFFFFF, 0xFFFFFF,
0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0xF8A6F2, 0x000000, 0xFFFFFF, 0x000000,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
};

const long birdytry16[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xF8A6F2, 0xF8A6F2, 0x000000, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0x000000, 0xF8A6F2, 0x000000,
0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0x000000,
0xFFFFFF, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0xFFFFFF, 0x000000,
0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x000000, 0xFFFFFF, 0xFFFFFF,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x2E2EF6, 0xFFFFFF, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0x2E2EF6, 0x2E2EF6, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0xF8A6F2, 0x2E2EF6, 0xF8A6F2, 0x000000, 0x000000, 0x000000,
};

const long dkmario02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xED7D31, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xED7D31, 0xED7D31, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000,

};

const long dkmario03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
0xED7D31, 0xED7D31, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x0000FF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000,
0x000000, 0xED7D31, 0xED7D31, 0x0000FF, 0xED7D31, 0xFF0000, 0xFF0000, 0xFF0000, 0xED7D31, 0xFF0000, 0x0000FF, 0x0000FF, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31,
0xED7D31, 0xED7D31, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x0000FF, 0x000000, 0x000000,
0x000000, 0x000000, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
0x000000, 0x000000, 0x0000FF, 0x0000FF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000,
0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000,

};

const long bombjack03[] PROGMEM =
{
0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00FFFF, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0xFFFFFF, 0x00FFFF, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x000000, 0x00FFFF, 0x000000, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0x000000, 0xFFE393, 0x000000, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x00355C, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0x00FFFF, 0x00FFFF, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C, 0x00FFFF, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C,
0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFF0000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C,
0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFF00, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00355C,
0x00355C, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x000000, 0x000000, 0x00355C, 0x00355C,


};

const long bombjack04[] PROGMEM =
{
0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00FFFF, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0x00FFFF, 0xFFFFFF, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0x000000, 0x00FFFF, 0x000000, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0x000000, 0xFFE393, 0x000000, 0xFFFFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00FFFF, 0x00FFFF, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C, 0xFFE393, 0xFFE393, 0xFFE393, 0xFFE393, 0x00FFFF, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C,
0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFF0000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00FFFF, 0xFFFF00, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0x00FFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00355C, 0x00355C,
0x00355C, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x00355C, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00355C,
0x00355C, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x00355C, 0x00355C, 0x00355C,
0x00355C, 0x00355C, 0x000000, 0x000000, 0x000000, 0x000000, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x00355C, 0x000000, 0x000000, 0x00355C, 0x00355C,

};

const long frogger01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0xFF00FF, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFF00FF, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long frogger02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0xFF00FF, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFF00FF, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long frogger03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0xFF00FF, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFF00FF, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x00B050, 0xFFFF00, 0x00B050, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0xFFFF00, 0x00B050, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000, 0x00B050, 0xFFFF00, 0xFFFF00, 0x00B050, 0x000000, 0x000000, 0x00B050, 0x00B050, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B050, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long bagman01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000,

};

const long bagman02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xED7D31, 0xED7D31,
0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0x000000, 0x000000,
0x000000, 0x000000, 0xED7D31, 0xED7D31, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31, 0x000000, 0x000000,
0x000000, 0x000000, 0xED7D31, 0xED7D31, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000,
0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000,

};

const long bagman03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x00B0F0,
0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xED7D31, 0x000000, 0x000000,
0x000000, 0x000000, 0xED7D31, 0xED7D31, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xED7D31, 0xED7D31,
0xED7D31, 0xED7D31, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31, 0x000000, 0x000000,
0x000000, 0x000000, 0xED7D31, 0xED7D31, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xED7D31, 0xED7D31,
0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long bagman04[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31,
0xED7D31, 0xED7D31, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31,
0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long bagman05[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xED7D31, 0xED7D31, 0x000000, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x00B0F0, 0x00B0F0, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xED7D31, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0x00B0F0, 0x000000, 0x000000, 0x00B0F0, 0x00B0F0, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000,
0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000, 0xED7D31, 0xED7D31, 0xED7D31, 0x000000, 0x000000,

};

const long mrdoball01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x3333FF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000,
0x3333FF, 0x000000, 0x000000, 0x000000, 0x3333FF, 0x3333FF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x3333FF, 0x3333FF, 0x3333FF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3333FF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x3333FF, 0x3333FF,
0x3333FF, 0x3333FF, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3333FF,
0x3333FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0x3333FF, 0x3333FF, 0x3333FF, 0x3333FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long mrdoball02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000,
0x3333FF, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0x3333FF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x3333FF, 0x3333FF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x3333FF, 0x3333FF, 0x3333FF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3333FF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFFFFFF, 0xFF0000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xFF0000, 0xFF0000, 0x3333FF, 0x3333FF, 0x3333FF, 0x3333FF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long bbobble01[] PROGMEM =
{
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0x06FA1D, 0x3C66EC,
0x3C66EC, 0xFFFF00, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFF00, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x06FA1D,
0x06FA1D, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0x3C66EC,
0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0x3C66EC,

};

const long bbobble02[] PROGMEM =
{
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0x06FA1D, 0x3C66EC,
0x3C66EC, 0xFFFF00, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFF00, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFFFF00, 0x06FA1D,
0x3C66EC, 0x06FA1D, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0x3C66EC,
0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0x3C66EC,

};

const long bbobble03[] PROGMEM =
{
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0x06FA1D, 0x3C66EC,
0x3C66EC, 0xFFFF00, 0xFFFFFF, 0x000000, 0x06FA1D, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFF00, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFF00, 0xFFFF00, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x000000, 0xFFFF00, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x3C66EC, 0x3C66EC, 0x3C66EC,
0x3C66EC, 0x3C66EC, 0xFFFF00, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x3C66EC,
0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFFFF00, 0x3C66EC,
0x06FA1D, 0x06FA1D, 0x06FA1D, 0x3C66EC, 0x06FA1D, 0x06FA1D, 0x06FA1D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFF7D7D, 0xFFFFFF, 0xFF7D7D, 0xFF7D7D,

};

const long digdug201[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0x9BC2E6, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0xFF99FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF99FF, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000,
0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000,
0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0xFFC000, 0x000000, 0x000000,
0x000000, 0xFFC000, 0x000000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000,
0x000000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0xFFC000, 0x000000,
0x000000, 0x000000, 0xFFC000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x000000,
0x000000, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x000000, 0x000000, 0xFFC000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x000000,
0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long digdug202[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0x9BC2E6, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0xFF99FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF99FF, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000,
0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000,
0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0xFFC000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFC000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000,
0x000000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0x000000, 0xFFC000, 0x000000, 0x000000,
0x000000, 0xFFC000, 0x000000, 0x000000, 0x9BC2E6, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x000000, 0x000000,
0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x9BC2E6, 0x000000, 0xFFC000, 0x000000,
0x000000, 0x000000, 0x000000, 0x9BC2E6, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000,
0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x9BC2E6, 0x9BC2E6, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long digdug203[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0x9BC2E6, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0xFF99FF, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF99FF, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000,
0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xFF0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF0000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000,
0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0xFFC000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFC000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0x000000, 0xF4B084, 0x000000, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000,
0x000000, 0x000000, 0xF2F2F2, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF4B084, 0xF2F2F2, 0x000000, 0xFFC000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFC000, 0x000000, 0x000000, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x9BC2E6, 0x000000, 0x000000,
0x000000, 0x9BC2E6, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0xFFC000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x9BC2E6, 0x9BC2E6, 0x000000,
0x000000, 0x9BC2E6, 0x9BC2E6, 0x9BC2E6, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x9BC2E6, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xF2F2F2, 0xF2F2F2, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long GalagaBfly01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x000000, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x000000, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFFFF00, 0xFFFF00, 0x00CC99, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000,
0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000,
0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000,
0x000000, 0x00CC99, 0xFF3300, 0x00CC99, 0x00CC99, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0x00CC99, 0x000000, 0x000000,
0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0x00CC99, 0x00CC99,
0x00CC99, 0xFF3300, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0x00CC99, 0x000000,
0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99,
0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000,
0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99,
0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000,
};

const long GalagaBfly02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x000000, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0xFF3300, 0xFF3300, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0x00CC99, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000,
0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000,
0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0xFFFF00, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000,
0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000,
0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x00CC99, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00CC99, 0x000000, 0x00CC99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
};

const long BTime01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFC000, 0xFFC000, 0xC65911, 0xFFC000, 0xFFC000, 0xC65911, 0xFFC000, 0xFFC000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFFFFF, 0xFFFFFF,
0xFFC000, 0xFFC000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0xFFC000, 0xFFC000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x48F52B, 0x48F52B, 0x48F52B, 0x000000, 0x000000, 0x48F52B, 0x48F52B, 0x48F52B, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long BTime02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000, 0x000000,
0xFFC000, 0xFFC000, 0x000000, 0x000000, 0xFFFFFF, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFFFFF, 0x000000, 0x000000, 0xFFC000, 0xFFC000,
0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0xFFC000, 0xFFC000, 0xC65911, 0xFFC000, 0xFFC000, 0xC65911, 0xFFC000, 0xFFC000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF,
0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFC000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000,
0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFF0000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x48F52B, 0x48F52B, 0x48F52B, 0x000000, 0x000000, 0x48F52B, 0x48F52B, 0x48F52B, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Mappy01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000,
0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x3C66EC, 0x3C66EC, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0x3C66EC, 0x000099, 0xFFFF66, 0xFFFF66, 0x000099, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000,
0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000,
0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0x000000, 0xFFFF66,
0x000000, 0xFFFF66, 0x000000, 0x000000, 0xFAA306, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x3C66EC, 0xA6A6A6, 0xA6A6A6,
0xA6A6A6, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC, 0xA6A6A6, 0xFFFF66, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xC65911, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0xC65911, 0xC65911, 0x000000, 0x000000,
0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xC65911, 0xC65911, 0x000000,
0x000000, 0xC65911, 0xC65911, 0xC65911, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3C66EC, 0xC65911, 0xC65911, 0xC65911, 0x000000,
0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Mappy02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000,
0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x3C66EC, 0x3C66EC, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0x3C66EC, 0x000099, 0xFFFF66, 0xFFFF66, 0x000099, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000,
0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
0x000000, 0xFFFF66, 0x000000, 0x000000, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000,
0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0xFFFF66, 0x000000,
0x000000, 0xFFFF66, 0xA6A6A6, 0x000000, 0xFAA306, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xA6A6A6, 0xA6A6A6, 0x000000,
0x000000, 0xA6A6A6, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000,
0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Mappy03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000,
0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x3C66EC, 0x3C66EC, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0x3C66EC, 0x000099, 0xFFFF66, 0xFFFF66, 0x000099, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000, 0x000000,
0xFFFF66, 0x000000, 0xA6A6A6, 0xFF9999, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFF9999, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6,
0xA6A6A6, 0xFF9999, 0xFF9999, 0xFF9999, 0xA6A6A6, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xA6A6A6, 0xFFFFFF, 0xFFFFFF, 0xFF9999, 0xA6A6A6, 0x000000, 0xFFFF66, 0x000000,
0x000000, 0x000000, 0xFFFF66, 0x000000, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0x000000, 0xFFFFFF, 0xA6A6A6, 0xA6A6A6, 0xFF9999, 0xFF9999, 0xA6A6A6, 0x000000,
0xA6A6A6, 0x000000, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x000000, 0xA6A6A6, 0xA6A6A6, 0x000000, 0x000000,
0x000000, 0x000000, 0xA6A6A6, 0xA6A6A6, 0xFAA306, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0xA6A6A6, 0x3C66EC, 0xA6A6A6, 0xA6A6A6,
0x000000, 0xA6A6A6, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xFFFFFF, 0xFFFFFF, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xC65911, 0xC65911, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0x3C66EC, 0xFFFF66, 0x3C66EC, 0xC65911, 0xC65911, 0x000000, 0x000000,
0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0x3C66EC, 0xC65911, 0xC65911, 0xC65911,
0xC65911, 0xC65911, 0xC65911, 0xC65911, 0x3C66EC, 0x000000, 0x000000, 0x000000, 0x000000, 0x3C66EC, 0x3C66EC, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xC65911, 0xC65911, 0xC65911,
0xC65911, 0xC65911, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000,
0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird03[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000,
0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000,
0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0xFF3300, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird04[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0xD9D9D9, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird05[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF,
0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0xD9D9D9, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x0000FF, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird06[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000,
0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000,
0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0xD9D9D9, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x0000FF, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird07[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF,
0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
0x000000, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF3300, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird08[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF,
0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x0000FF, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
0x000000, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird09[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird10[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF,
0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000,
0x000000, 0x000000, 0x0000FF, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

const long Firebird11[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x0000FF, 0x0000FF, 0x000000,
0x000000, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0x000000, 0xD9D9D9, 0xD9D9D9, 0x0000FF, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF3300, 0x000000, 0x000000, 0x0000FF, 0xD9D9D9, 0xD9D9D9, 0xD9D9D9, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xD9D9D9, 0x0000FF, 0x0000FF, 0x000000, 0xFF3300, 0x000000, 0xFF3300, 0xFF3300, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,

};

// Follows are the instruction steps for all the light functions you want to display.

// Rainbow effect

void rainbow() {
  uint16_t i, j = 0;

  // Loop the rainbow effect as long as currentAnimation is set to rainbow
  while (currentAnimation == 3) {  // Assuming '3' is the code for the rainbow animation
    for(i = 0; i < NUM_LEDS; i++) {
      leds[i] = CHSV((i + j) % 255, 255, 255);  // Cycle through the color wheel
    }
    FastLED.show();

    // Non-blocking delay function to allow animation interruption
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 20) {  // 20ms delay to adjust speed
      if (currentAnimation != 3) {
        return;  // Exit the rainbow animation if a different animation is selected
      }
      server.handleClient();  // Handle web server requests during the delay
      delay(1);  // Yield to allow processing other tasks
    }

    j++;  // Increment the color wheel index
  }
}

// Fire Effect parameters

#define COOLING  80       // Increase cooling to produce more reds and less white
#define SPARKING 80      // Adjust sparking for better distribution

// Function to map (x, y) coordinates to the correct index in the 16x16 array
int XY(int x, int y) {
  if (y % 2 == 0) {
    return (y * 16) + x;  // Even rows left to right
  } else {
    return (y * 16) + (15 - x);  // Odd rows right to left (zigzag layout)
  }
}

// Fire Effect function

void fireEffect() {
  static byte heat[16][16];  // 16x16 matrix for heat values

  // Continuously loop the fire effect
  while (currentAnimation == 1) {  // Only run this if currentAnimation == 1 (fire effect)

    // Step 1. Cool down every cell a little
    for (int x = 0; x < 16; x++) {
      for (int y = 0; y < 16; y++) {
        heat[x][y] = qsub8(heat[x][y], random8(0, COOLING));  // Adjust cooling
      }
    }

    // Step 2. Heat from each cell drifts 'up' and diffuses a little
    for (int y = 14; y >= 0; y--) {  // Include row 0 (bottom row) to row 14
      for (int x = 0; x < 16; x++) {
        heat[x][y] = (heat[x][y + 1] + heat[x][y + 2]) / 2;
      }
    }

    // Step 3. Randomly ignite new 'sparks' of heat near the bottom
    for (int x = 0; x < 16; x++) {
      if (random8() < SPARKING) {
        heat[x][15] = qadd8(heat[x][15], random8(160, 255));  // Bottom row 'sparks'
      }
    }

    // Step 4. Map from heat cells to LED colors for the entire matrix
    for (int x = 0; x < 16; x++) {
      for (int y = 0; y < 16; y++) {
        // Map heat values to "fire-like" colors using the HeatColor() function
        CRGB color = HeatColor(heat[x][y]);
        leds[XY(x, y)] = color;  // Map the heat array to the LED matrix
      }
    }

    FastLED.show();

    // Non-blocking delay function to allow animation interruption
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 40) {  // Approximately a 40ms delay
      if (currentAnimation != 1) {
        return;  // Exit the fireEffect if a different animation is selected
      }
      server.handleClient();  // Handle web server requests during the delay
      delay(1);  // Yield to allow processing other tasks
    }
  }
}

// Twinkle animation

void twinkle() {
  while (currentAnimation == 2) {  // Assuming '2' is the code for the twinkle animation
    fadeToBlackBy(leds, NUM_LEDS, 10);  // Reduce the intensity of the fading

    // Add multiple twinkles per iteration to ensure more lights are twinkling
    for (int i = 0; i < 5; i++) {  // Add 5 twinkles instead of 1
      int pos = random16(NUM_LEDS);
      leds[pos] += CHSV(random8(), 200, 255);  // Add a random color twinkle
    }
    
    FastLED.show();

    // Non-blocking delay function to allow animation interruption
    unsigned long currentMillis = millis();
    while (millis() - currentMillis < 50) {  // Approximate 50ms delay
      if (currentAnimation != 2) {
        return;  // Exit the twinkle animation if a different animation is selected
      }
      server.handleClient();  // Handle web server requests during the delay
      delay(1);  // Yield to allow processing other tasks
    }
  }
}

// Solid Red: Fill with red

void solidred() {
  fill_solid(leds, NUM_LEDS, CRGB::Red);
  FastLED.show();
}

// Solid Green: Fill with green

void solidgreen() {
  fill_solid(leds, NUM_LEDS, CRGB::Green);
  FastLED.show();
}

// Solid Blue: Fill with blue

void solidblue() {
  fill_solid(leds, NUM_LEDS, CRGB::Blue);
  FastLED.show();
}

// Colour Wipe Effect

void colorwipe() {
  while (currentAnimation == 8) {  // Keep running while 'colorwipe' is the selected animation
    CRGB randomColor = CHSV(random8(), 255, 255);  // Generate a random color

    for (int i = 0; i < NUM_LEDS; i++) {
      leds[i] = randomColor;  // Set each LED to the random color
      FastLED.show();
      
      // Add delay inside the function for each LED update
      unsigned long startMillis = millis();
      while (millis() - startMillis < 50) {  // Approximately 50ms delay for each LED
        server.handleClient();  // Handle web requests during delay
        if (currentAnimation != 8) return;  // Exit the loop if a new animation is selected
        delay(1);  // Yield to allow other processes to run
      }

      // Check if the animation has changed after updating each LED
      if (currentAnimation != 8) {
        return;  // Exit if the animation is changed
      }
    }
    
    FastLED.clear();  // Optionally clear the LEDs after each wipe

    // Add a small delay before the next color wipe cycle
    unsigned long startCycleMillis = millis();
    while (millis() - startCycleMillis < 500) {  // Approximate 500ms pause between full wipes
      server.handleClient();  // Handle web server requests
      if (currentAnimation != 8) return;  // Break out if animation is changed
      delay(1);  // Yield
    }
  }
}

// Plasma Effect

void plasma() {
  while (currentAnimation == 9) {  // Assuming '9' is the code for the plasma animation
    static int t = 0;
    for (int x = 0; x < 16; x++) {
      for (int y = 0; y < 16; y++) {
        // Calculate plasma values
        byte colorIndex = (sin8(x * 10 + t) + sin8(y * 10 + t)) / 2;
        leds[XY(x, y)] = CHSV(colorIndex, 255, 255);  // Apply color to each pixel
      }
    }
    
    FastLED.show();
    nonBlockingDelay(25);  // Control the speed of the plasma effect
    
    t += 1;  // Increment time for the plasma wave effect

    // Exit if a different animation is selected
    if (currentAnimation != 9) {
      return;  // Break out of the plasma effect
    }
  }
}

// Bouncing Ball Effect

void bouncingball() {
  // Initialize ball position randomly within the matrix bounds
  static int ballX = random(0, 16);
  static int ballY = random(0, 16);

  // Initialize ball direction with random x and y increments
  static int ballDirX = random(1, 3) * (random(0, 2) * 2 - 1); // Randomly -1 or +1
  static int ballDirY = random(1, 3) * (random(0, 2) * 2 - 1); // Randomly -1 or +1

  while (currentAnimation == 10) {  // Assuming '10' is the code for the bouncing ball animation

    // Clear the LED matrix
    FastLED.clear();

    // Set the ball color
    leds[XY(ballX, ballY)] = CRGB::Blue;  // Change colour as needed

    // Show the current state
    FastLED.show();

    // Update the ball position
    ballX += ballDirX;
    ballY += ballDirY;

    // Check for wall collisions and adjust direction accordingly
    if (ballX >= 15 || ballX <= 0) {
      ballDirX = -ballDirX;  // Reverse direction on X-axis
      ballX = constrain(ballX, 0, 15);  // Keep within bounds
    }
    if (ballY >= 15 || ballY <= 0) {
      ballDirY = -ballDirY;  // Reverse direction on Y-axis
      ballY = constrain(ballY, 0, 15);  // Keep within bounds
    }

    nonBlockingDelay(50);  // Control the speed of the bouncing ball effect

    // Exit if a different animation is selected
    if (currentAnimation != 10) {
      return;  // Break out of the bouncing ball effect
    }
  }
}

// Meteor effect with bright white and fading red trail

void meteoreffect() {
  while (currentAnimation == 11) {  // Assuming '11' is the code for the meteor effect
    // Randomly choose the starting x position
    int startX = random(0, 16);  // 16 for width of the matrix

    // Start the meteor from the top
    for (int y = 0; y < 16; y++) {  // 16 for height of the matrix
      // Clear the previous position
      FastLED.clear();
      
      // Set the current meteor position
      leds[XY(startX, y)] = CRGB::White; // Bright white meteor

      // Create a fading trail
      const int trailLength = 8;  // Adjust this for longer/shorter trails
      for (int t = 1; t <= trailLength; t++) {
        int trailY = y - t;  // Trail position
        if (trailY >= 0) { // Ensure we don't go out of bounds
          // Adjust the fading level
          int fadeLevel = 255 - (t * 25); // Adjust the multiplier here for more or less fade
          fadeLevel = constrain(fadeLevel, 0, 255); // Ensure fade level is within bounds
          leds[XY(startX, trailY)] = CRGB(fadeLevel, 0, 0); // Fading red trail
        }
      }

      FastLED.show();
      nonBlockingDelay(100);  // Adjust speed of the falling meteor

      // Exit if a new animation is selected
      if (currentAnimation != 11) {
        return;
      }
    }
  }
}

// Wave Effect
void waveeffect() {
  while (currentAnimation == 12) {  // Assuming '12' is the code for the wave effect
    // Loop through each row of the matrix
    for (int y = 0; y < 16; y++) { // 16 for height of the matrix
      // Clear the LED matrix
      FastLED.clear();
      
      // Loop through each column and set the wave effect
      for (int x = 0; x < 16; x++) { // 16 for width of the matrix
        // Calculate the wave height
        int waveHeight = (sin((x + millis() / 50.0) * 0.5) * 127) + 128; // Adjust for wave frequency and amplitude
        // Only light up LEDs below the wave height
        if (y < waveHeight) {
          leds[XY(x, y)] = CRGB::Blue; // Change color as needed
        } else {
          leds[XY(x, y)] = CRGB::Black; // Turn off LEDs above wave height
        }
      }
      
      // Show the current state
      FastLED.show();
      nonBlockingDelay(20); // Control the speed of the wave effect

      // Exit if a new animation is selected
      if (currentAnimation != 12) {
        return;  // Break out of the wave effect
      }
    }
  }
}

// Conway's Game of Life Effect

void conwaysGameOfLife() {
  // Initialize the grid with random values
  bool grid[HEIGHT][WIDTH];
  
  for (int y = 0; y < HEIGHT; y++) {
    for (int x = 0; x < WIDTH; x++) {
      grid[y][x] = random(0, 2); // Randomly set cell to alive (true) or dead (false)
    }
  }

  // Function to count alive neighbors, capturing grid by reference
  auto countAliveNeighbors = [&grid](int x, int y) {
    int count = 0;
    for (int dy = -1; dy <= 1; dy++) {
      for (int dx = -1; dx <= 1; dx++) {
        if (dx == 0 && dy == 0) continue; // Skip the cell itself
        int newX = (x + dx + WIDTH) % WIDTH; // Wrap around
        int newY = (y + dy + HEIGHT) % HEIGHT; // Wrap around
        count += grid[newY][newX]; // Increment count if neighbor is alive
      }
    }
    return count;
  };

  // Conway's Game of Life update logic
  
  while (currentAnimation == 13) {  // Assuming '13' is the code for Game of Life effect
    // Clear the LED matrix
    FastLED.clear();

    // Update the grid and set LED colors based on the grid state
    for (int y = 0; y < HEIGHT; y++) {
      for (int x = 0; x < WIDTH; x++) {
        int aliveNeighbors = countAliveNeighbors(x, y);

        // Apply Game of Life rules
        if (grid[y][x]) { // Cell is alive
          leds[XY(x, y)] = CRGB::Green; // Change color for alive cells
          grid[y][x] = (aliveNeighbors == 2 || aliveNeighbors == 3);
        } else { // Cell is dead
          grid[y][x] = (aliveNeighbors == 3);
          leds[XY(x, y)] = CRGB::Black; // Turn off dead cells
        }
      }
    }

    FastLED.show(); // Show the current state

    // Update the grid for the next generation
    bool newGrid[HEIGHT][WIDTH];
    for (int y = 0; y < HEIGHT; y++) {
      for (int x = 0; x < WIDTH; x++) {
        int aliveNeighbors = countAliveNeighbors(x, y);

        // Apply Game of Life rules
        if (grid[y][x]) { // Cell is alive
          newGrid[y][x] = (aliveNeighbors == 2 || aliveNeighbors == 3);
        } else { // Cell is dead
          newGrid[y][x] = (aliveNeighbors == 3);
        }
      }
    }

    // Copy new grid to the main grid
    memcpy(grid, newGrid, sizeof(grid));

    nonBlockingDelay(100); // Control the speed of the Game of Life effect

    // Exit if a new animation is selected
    if (currentAnimation != 13) {
      return;  // Break out of the Game of Life effect
    }
  }
}

// Fireworks Effect

void fireworksEffect() {
    const int maxParticles = 5;  // Max rockets
    const int maxExplosionParticles = 15;  // Max explosion particles
    const int explosionLife = 150; // Particle life

    struct Particle {
        int x, y;             // Position
        int speedX, speedY;   // Speed
        CRGB color;          // Color
        int life;            // Remaining life
        bool isActive;       // If the particle is active
        bool hasExploded;    // If it has exploded
    };

    Particle rockets[maxParticles];
    Particle explosionParticles[maxExplosionParticles];

    // Initialize rockets
    for (int i = 0; i < maxParticles; i++) {
        rockets[i].isActive = false;
    }

    while (currentAnimation == 14) { // Continue while animation is active
        FastLED.clear();

        // Launch rockets
        for (int i = 0; i < maxParticles; i++) {
            if (!rockets[i].isActive) {
                // Launch rocket from bottom
                int startX = random(0, WIDTH);
                rockets[i] = {startX, HEIGHT - 1, random(-1, 2), random(-4, -1), CHSV(random(0, 255), 255, 255), explosionLife, true, false};
                rockets[i].isActive = true; // Activate the rocket
            }
        }

        // Update rocket positions
        for (int i = 0; i < maxParticles; i++) {
            if (rockets[i].isActive) {
                // Move rocket
                rockets[i].x += rockets[i].speedX;
                rockets[i].y += rockets[i].speedY;

                // Explode if it reaches the middle
                if (rockets[i].y <= HEIGHT / 2) {
                    rockets[i].hasExploded = true;
                    for (int j = 0; j < maxExplosionParticles; j++) {
                        explosionParticles[j] = {rockets[i].x, rockets[i].y, random(-2, 2), random(-2, 2), rockets[i].color, explosionLife, true, false};
                    }
                }

                // Draw rocket
                if (rockets[i].x >= 0 && rockets[i].x < WIDTH && rockets[i].y >= 0 && rockets[i].y < HEIGHT) {
                    leds[XY(rockets[i].x, rockets[i].y)] = rockets[i].color;
                }
            }
        }

        // Update explosion particles
        for (int i = 0; i < maxExplosionParticles; i++) {
            if (explosionParticles[i].life > 0) {
                explosionParticles[i].x += explosionParticles[i].speedX;
                explosionParticles[i].y += explosionParticles[i].speedY;

                // Draw explosion particles
                if (explosionParticles[i].x >= 0 && explosionParticles[i].x < WIDTH && explosionParticles[i].y >= 0 && explosionParticles[i].y < HEIGHT) {
                    leds[XY(explosionParticles[i].x, explosionParticles[i].y)] = explosionParticles[i].color;
                }

                explosionParticles[i].life--;
                explosionParticles[i].color.fadeToBlackBy(5); // Fade effect
            }
        }

        // Reset rockets and particles after explosions
        for (int i = 0; i < maxParticles; i++) {
            if (rockets[i].hasExploded) {
                rockets[i].isActive = false; // Reset rocket
            }
        }

        FastLED.show();
        nonBlockingDelay(150); // Delay for smooth effect

        // Check for exit
        if (currentAnimation != 14) {
            return; // Exit animation
        }
    }
}

// Rain Effect
void raineffect() {
  while (currentAnimation == 15) {  // Assuming '15' is the code for the rain effect
    fadeToBlackBy(leds, NUM_LEDS, 64);  // Slowly fade existing raindrops

    for (int x = 0; x < 16; x++) {
      if (random8() < 50) {  // 50% chance of a raindrop in each column
        leds[XY(x, 0)] = CRGB::Blue;  // Drop appears at the top
      }
    }

    // Move all LEDs down
    for (int y = 15; y > 0; y--) {
      for (int x = 0; x < 16; x++) {
        leds[XY(x, y)] = leds[XY(x, y - 1)];
      }
    }

    FastLED.show();  // Update the LED state
    nonBlockingDelay(150); // Delay for smooth effect

    // Exit if a new animation is selected
    if (currentAnimation != 15) {
      return;  // Break out of the rain effect
    }
  }
}

// Code Matrix Effect

void matrixCodeRain() {
  while (currentAnimation == 16) {  // Assuming '16' is the code for the code rain effect
    // Generate new "code rain" at the top row
    for (int x = 0; x < 16; x++) {
      if (random8() < 100) {
        leds[XY(x, 0)] = CHSV(85, 255, 255);  // Bright green "code"
      } else {
        leds[XY(x, 0)] = CRGB::Black;
      }
    }

    // Shift all rows down
    for (int y = 15; y > 0; y--) {
      for (int x = 0; x < 16; x++) {
        leds[XY(x, y)] = leds[XY(x, y - 1)];
      }
    }

    FastLED.show();
    nonBlockingDelay(100);  // Use non-blocking delay for smoother effect

    // Exit if a new animation is selected
    if (currentAnimation != 16) {
      return;  // Break out of the code rain effect
    }
  }
}

// Rotating Lines Effect with Randomized Color

void rotatingLines() {
  static uint8_t angle = 0;  // Maintain the angle across function calls

  while (currentAnimation == 17) {  // Assuming '17' is the code for the rotating lines effect
    angle++;  // Increment the angle for rotation
    
    // Clear the LED matrix first
    FastLED.clear();

    // Generate a random color for each iteration
    CRGB color = CHSV(random8(0, 255), 255, 255);  // Random hue with full saturation and brightness

    for (int i = 0; i < 16; i++) {
      leds[XY(i, (i + angle) % 16)] = color;  // Set the rotating line position with the random color
    }
    
    FastLED.show();
    nonBlockingDelay(50);  // Use non-blocking delay for smoother effect
    
    fadeToBlackBy(leds, NUM_LEDS, 64);  // Fade out slowly

    // Exit if a new animation is selected
    if (currentAnimation != 17) {
      return;  // Break out of the rotating lines effect
    }
  }
}

// Circular Effect with Randomized Color

void circularSpin() {
  static uint8_t angle = 0;  // Maintain the angle across function calls

  while (currentAnimation == 18) {  // Assuming '18' is the code for the rotating lines effect
    angle++;  // Increment the angle for rotation
    
    // Clear the LED matrix first
    FastLED.clear();

    // Generate a random color for each iteration
    CRGB color = CHSV(random8(0, 255), 255, 255);  // Random hue with full saturation and brightness

    // Calculate the center of the matrix
    int centerX = 8;  // Half of 16 (matrix width)
    int centerY = 8;  // Half of 16 (matrix height)

    // Draw lines at varying angles
    for (int i = 0; i < 16; i++) {
      // Calculate positions for the line endpoints based on the angle
      int x1 = centerX + cos(radians(angle + (i * 22.5))) * 7;  // Adjust the length as needed
      int y1 = centerY + sin(radians(angle + (i * 22.5))) * 7;  // Adjust the length as needed
      int x2 = centerX + cos(radians(angle + (i * 22.5))) * -7; // Adjust the length as needed
      int y2 = centerY + sin(radians(angle + (i * 22.5))) * -7; // Adjust the length as needed

      // Draw the lines
      if (x1 >= 0 && x1 < 16 && y1 >= 0 && y1 < 16) {
        leds[XY(x1, y1)] = color;  // Set the color at (x1, y1)
      }
      if (x2 >= 0 && x2 < 16 && y2 >= 0 && y2 < 16) {
        leds[XY(x2, y2)] = color;  // Set the color at (x2, y2)
      }
    }

    FastLED.show();
    nonBlockingDelay(50);  // Use non-blocking delay for smoother effect

    fadeToBlackBy(leds, NUM_LEDS, 64);  // Fade out slowly

    // Exit if a new animation is selected
    if (currentAnimation != 17) {
      return;  // Break out of the circular spin effect
    }
  }
}

// Arcade Sprites: - Infinite Loop
void arcadesprites() {
  while (currentAnimation == 7) {  // Assuming '7' is the code for the arcade sprite animation
    
    // Animation sequence: DigDug
    
    int digDugRepetitions = 8;  // Define how many times to loop the DigDug frames
    for (int runCount = 0; runCount < digDugRepetitions; runCount++) {
      
      // Display DigDug first frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(DigDug01[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Delay for switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display DigDug second frame
      
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(DigDug02[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Delay for switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Qbert
    int qbertRepetitions = 8;  // Define how many times to loop the Qbert frames
    for (int runCount = 0; runCount < qbertRepetitions; runCount++) {

      // Display Qbert first frame
      
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Qbert01[i]));
      }
      FastLED.show();
      nonBlockingDelay(500);  // Delay for switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Qbert second frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Qbert02[i]));
      }
      FastLED.show();
      nonBlockingDelay(500);  // Delay for switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }
    
    // Animation sequence: Bombjack
    int bombjackRepetitions = 8;  // Define how many times to loop the Bombjack frames
    for (int runCount = 0; runCount < bombjackRepetitions; runCount++) {
      
      // Display Bombjack first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BombJack01[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bombjack second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BombJack02[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame
    
      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }
  
    // Animation sequence: The Glob
    int theglobRepetitions = 4;  // Define how many times to loop TheGlob frames
    for (int runCount = 0; runCount < theglobRepetitions; runCount++) {
      // Display TheGlob first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob01[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob02[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob03[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame      

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob04[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob05[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display The Glob sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob06[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display The Glob seventh frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(TheGlob07[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Pengo Dance
    int pengodanceRepetitions = 4;  // Define how many times to loop Pengodance frames
    for (int runCount = 0; runCount < pengodanceRepetitions; runCount++) { // Sets first run count to 0
      // Display Pengo Dance first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance04[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance05[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance06[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance seventh frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance07[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance eighth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance08[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance ninth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance09[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Pengo Dance tenth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(pengodance10[i]));
      }
      
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }
      
    // Animation sequence: Ms Pacman
    int mspacmanRepetitions = 6;  // Define how many times to loop Mspacman frames
    for (int runCount = 0; runCount < mspacmanRepetitions; runCount++) { // Sets first run count to 0
      // Display Ms Pacman first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman01[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman03[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman01[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman seventh frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman03[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman eigth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Ms Pacman ninth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mspacman01[i]));
      }
      FastLED.show();
      nonBlockingDelay(100);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
     }

    // Animation sequence: Space Invaders
    int invadersRepetitions = 6;  // Define how many times to loop Invaders frames
    for (int runCount = 0; runCount < invadersRepetitions; runCount++) { // Sets first run count to 0
      // Display Space Invaders first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders04[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders05[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Invaders sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(invaders06[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Attack UFO
    int attackufoRepetitions = 6;  // Define how many times to loop Attack UFO frames
    for (int runCount = 0; runCount < attackufoRepetitions; runCount++) { // Sets first run count to 0
      // Display Attack UFO first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo01[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Attack UFO second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo02[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Attack UFO third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo03[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Attack UFO fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo04[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Attack UFO fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(attackufo05[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Birdy Try
    int birdytryRepetitions = 6;  // Define how many times to loop Birdy Try frames
    for (int runCount = 0; runCount < birdytryRepetitions; runCount++) { // Sets first run count to 0
      // Display Birdy Try first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry10[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry11[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry12[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry13[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try fifth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry14[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try sixth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry15[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Birdy Try seventh frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(birdytry16[i]));
      }
      FastLED.show();
      nonBlockingDelay(400);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Mario
    int marioRepetitions = 6;  // Define how many times to loop Mario frames
    for (int runCount = 0; runCount < marioRepetitions; runCount++) { // Sets first run count to 0
      // Display Mario first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(dkmario02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Mario second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(dkmario03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Bombjack2
    int bombjack2Repetitions = 6;  // Define how many times to loop Bombjack2 frames
    for (int runCount = 0; runCount < bombjack2Repetitions; runCount++) { // Sets first run count to 0
      // Display Bombjack first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bombjack03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bombjack second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bombjack04[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Frogger
    int froggerRepetitions = 6;  // Define how many times to loop Frogger frames
    for (int runCount = 0; runCount < froggerRepetitions; runCount++) { // Sets first run count to 0
      // Display Frogger first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(frogger01[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Frogger second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(frogger02[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Frogger third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(frogger03[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Bagman
    int bagmanRepetitions = 6;  // Define how many times to loop Bagman frames
    for (int runCount = 0; runCount < bagmanRepetitions; runCount++) { // Sets first run count to 0
      // Display Bagman first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bagman01[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bagman second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bagman02[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bagman third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bagman03[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bagman fourth frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bagman05[i]));
      }
      FastLED.show();
      nonBlockingDelay(150);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Mr Do
    int mrdoballRepetitions = 6;  // Define how many times to loop Mr Do frames
    for (int runCount = 0; runCount < mrdoballRepetitions; runCount++) { // Sets first run count to 0
      // Display Mr Do first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mrdoball01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Mr Do second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(mrdoball02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Bubble Bobble
    int bbobbleRepetitions = 6;  // Define how many times to loop Bubble Bobble frames
    for (int runCount = 0; runCount < bbobbleRepetitions; runCount++) { // Sets first run count to 0
      // Display Bubble Bobble first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bbobble01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bubble Bobble second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bbobble02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Bubble Bobble third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(bbobble03[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }      
    }

    // Animation sequence: Galaga Butterfly
    
    int galagabflyRepetitions = 6;  // Define how many times to loop Galaga Butterfly frames
    for (int runCount = 0; runCount < galagabflyRepetitions; runCount++) { // Sets first run count to 0
      // Display Galaga Butterfly first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(GalagaBfly01[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Galaga Butterfly second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(GalagaBfly02[i]));
      }
      FastLED.show();
      nonBlockingDelay(300);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Burgertime
    
    int BTimeRepetitions = 6;  // Define how many times to loop Burgertime frames
    for (int runCount = 0; runCount < BTimeRepetitions; runCount++) { // Sets first run count to 0
      
      // Display Burgertime Butterfly first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BTime01[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Burgertime second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BTime02[i]));
      }
      FastLED.show();
      nonBlockingDelay(350);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
    }

    // Animation sequence: Mappy
    
    int mappyRepetitions = 6;  // Define how many times to loop Mappy frames
    for (int runCount = 0; runCount < mappyRepetitions; runCount++) { // Sets first run count to 0
      // Display Mappy first frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Mappy01[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Mappy second frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Mappy02[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Mappy third frame

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Mappy03[i]));
      }
      FastLED.show();
      nonBlockingDelay(250);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }      
    }

    // Animation sequence: Space Firebird
    
    int firebirdRepetitions = 6;  // Define how many times to loop Space Firebird frames
    for (int runCount = 0; runCount < firebirdRepetitions; runCount++) { // Sets first run count to 0
      
      // Display Space Firebird first frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird01[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird second frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird02[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird third frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird03[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird fourth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird04[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird fifth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird05[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird sixth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird06[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird seventh frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird07[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird eighth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird08[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird ninth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird09[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird tenth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird10[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird eleventh frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird11[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird twelfth frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird10[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }

      // Display Space Firebird 13th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird09[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird 14th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird07[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird 15th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird06[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird 16th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird05[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame
                  
      // Display Space Firebird 17th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird04[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird 18th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird03[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird 19th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird02[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }
      
      // Display Space Firebird 20th frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Firebird01[i]));
      }
      FastLED.show();
      nonBlockingDelay(200);  // Use non-blocking delay to allow handling stop requests. The number is the length of time before switching to the next frame

      // Exit the arcade sprite loop if another animation is selected
      if (currentAnimation != 7) {
        return;
      }       
    }

      // Optionally add a small delay before the next full cycle starts to avoid rapid looping
      nonBlockingDelay(100);  // Add a short delay between complete runs if desired for this Arcade Sprite only Loop. The number is the length of time before beginning the loop again.
    }
  }  
